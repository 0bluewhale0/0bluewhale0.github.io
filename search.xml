<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>szh的博客</title>
    <url>/2024/04/11/SZH%E7%9A%84%E5%8D%9A%E5%AE%A2/</url>
    <content><![CDATA[<p><em>为天地立心，为生民立命，为往圣继绝学，为万世开太平</em></p>
]]></content>
  </entry>
  <entry>
    <title>【share】毛概教材2021</title>
    <url>/2022/03/01/%E6%AF%9B%E6%A6%82%E6%95%99%E6%9D%90/</url>
    <content><![CDATA[<p><a href="https://pan.baidu.com/s/1CsdIdIfRZiUktfCOGZgixg">2021新版毛概教材带跳转目录</a><br>提取码：hhhh</p>
<p>若分享链接失效请留言，会及时更新。</p>
]]></content>
      <categories>
        <category>source</category>
      </categories>
      <tags>
        <tag>course</tag>
        <tag>source share</tag>
      </tags>
  </entry>
  <entry>
    <title>计组笔记_chapter1</title>
    <url>/2022/03/02/1_%E8%AE%A1%E7%BB%84%E7%AC%94%E8%AE%B0/</url>
    <content><![CDATA[<p>纯纯进行一个课件的CTRL+C、CTRL+V，根本不知道是什么意思，哭。</p>
<h2 id="第1章-计算机概述"><a href="#第1章-计算机概述" class="headerlink" title="第1章  计算机概述"></a>第1章  计算机概述</h2><h3 id="计算机的分类和应用"><a href="#计算机的分类和应用" class="headerlink" title="计算机的分类和应用"></a>计算机的分类和应用</h3><p>通用计算机分类<br><img src="https://api2.mubu.com/v3/document_image/bb50f260-a398-4bd2-9a97-d6af00a88dff-16175743.jpg" alt="通用计算机分类"></p>
<p>面向应用的分类</p>
<ol>
<li>通用计算机</li>
<li>专用计算机&#x2F;嵌入式计算机(Embedded)</li>
</ol>
<p>计算机的应用<br>略</p>
<h3 id="计算机发展简史"><a href="#计算机发展简史" class="headerlink" title="计算机发展简史"></a>计算机发展简史</h3><h4 id="计算机的演进"><a href="#计算机的演进" class="headerlink" title="计算机的演进"></a>计算机的演进</h4><ol>
<li>第0代 机械时代（BC-1940</li>
<li>第1代 电子管时代（1943-1959）</li>
<li>第2代 晶体管时代（1960-1968）</li>
<li>第4代 超大规模集成电路时代（1978－现在）</li>
<li>第5代 量子计算机、光计算机、生物计算机？</li>
</ol>
<p>世界上第一台计算机：ENIAC</p>
<p>摩尔定律：集成电路芯片中晶体<br>管数量大体上每2年翻一番</p>
<h4 id="计算机的性能指标-易考"><a href="#计算机的性能指标-易考" class="headerlink" title="计算机的性能指标(易考)"></a><mark>计算机的性能指标</mark>(易考)</h4><p><img src="https://api2.mubu.com/v3/document_image/7ec2da4e-3831-44cd-b68a-6509f0314ac3-16175743.jpg"></p>
<p><img src="https://api2.mubu.com/v3/document_image/099dd094-3f03-436f-afde-e0e84afb42d6-16175743.jpg"></p>
<ol>
<li>响应时间</li>
<li>利用率</li>
<li>处理机字长</li>
<li>总线宽度</li>
<li>吞吐量：通常用KB、MB、GB(gigabit吉比特)和TB表示。B表示Byte(字节)，b表示bit。 $K\equiv2^{10},M\equiv2^{20},G\equiv2^{30}$</li>
<li>存储器带宽：一般用字节数&#x2F;秒表示</li>
<li>主频&#x2F;时钟周期:CPU的工作节拍受主时钟控制，主时钟不断产生固定频率的时钟，主时钟的频率f称为CPU的主频。<mark>度量单位是MHz（$10^6$）、GHz($10^9$)。</mark>可以理解为每秒有几个CPU时钟周期。<br>主频的倒数称为CPU时钟周期T，T&#x3D;1&#x2F;f，度量单位是微秒，纳秒。</li>
<li>CPU执行时间:表示CPU执行一段程序所占用的CPU时间，也可以用指令数目x每条指令的平均执行时间。而每条指令的平均执行时间可以用每条指令所需的平均时钟周期数目x时钟周期时间。<br> <mark>$\tiny CPU执行时间&#x3D;程序的指令数\times CPI\times CPU时钟周期时间$</mark></li>
<li><strong>CPI（Clock Cycles Per Instruction）</strong>:表示每条指令执行所需要的时钟周期数，或执行一条指令所需的平均时钟周期数。<br><mark>$\tiny CPI&#x3D;程序执行所需的CPU时钟周期总数÷程序的指令总数$</mark></li>
<li>MIPS：每秒百万指令数。<u>M:百万million ($\tiny\underline{10^6}$) ，I:instruction指令，PS:per second每秒</u><br><mark>$\tiny MIPS&#x3D;（指令总数 \div 程序执行时间）\times 10^{-6}$</mark></li>
<li>MFLOPS：每秒百万次浮点操作次数。<u>FLO：浮点操作</u><br>   <mark>$\tiny MFLOPS&#x3D;（程序中的浮点运算次数\div程序执行时间)\times 10^{-6}$</mark></li>
<li>TFLOPS：每秒万亿浮点操作次数。T:trillion兆，也就是万亿，$10^{12}$<br><mark>$\tiny TFLOPS&#x3D;（程序中的浮点运算次数\div程序执行时间)\times 10^{-12}$</mark></li>
<li>例题<br><img src="https://api2.mubu.com/v3/document_image/5e55985c-21a8-465c-bb80-b572227826a7-16175743.jpg" alt="例题"><br>题解<img src="https://api2.mubu.com/v3/document_image/1646144690025ebba.jpg" alt="tijie"><br><img src="https://api2.mubu.com/v3/document_image/304a5e77-8917-4021-8b27-adb2d0e25941-16175743.jpg"></li>
</ol>
<h3 id="计算机的硬件"><a href="#计算机的硬件" class="headerlink" title="计算机的硬件"></a>计算机的硬件</h3><h4 id="计算机的组成-五大部分"><a href="#计算机的组成-五大部分" class="headerlink" title="计算机的组成(五大部分)"></a>计算机的组成(五大部分)</h4><ol>
<li>存储器</li>
<li>运算器</li>
<li>控制器</li>
<li>输入输出设备</li>
</ol>
<ul>
<li>计算机内部，指令和数据均以二进制的形式存储，其中，指令包括操作码和地址码（对谁进行该操作）</li>
<li>关于rax,eax,ax,al:AL是低八位，AX是本名，16位，EAX是extended即扩展的意思，32bits，而RAX则是re-extended，再拓展，64位</li>
</ul>
<h3 id="计算机系统的层次结构"><a href="#计算机系统的层次结构" class="headerlink" title="计算机系统的层次结构"></a>计算机系统的层次结构</h3><p><img src="https://api2.mubu.com/v3/document_image/a3c75fab-9dd4-41bb-9fa5-53a7d99b2edf-16175743.jpg" alt="层次结构2"></p>
<p><img src="https://api2.mubu.com/v3/document_image/714d08ad-abe7-4606-8270-1b2566e12ba7-16175743.jpg" alt="层次结构3"></p>
<p>软件与硬件的逻辑等价性,理论上讲，任何软件算法都可以用硬件实现，反之亦然。<br><img src="https://api2.mubu.com/v3/document_image/9bbf4121-a5d0-441c-af82-a56e3781eb3a-16175743.jpg" alt="软件与硬件的逻辑等价性"></p>
<h2 id="第2章-运算方法和运算器I"><a href="#第2章-运算方法和运算器I" class="headerlink" title="第2章 运算方法和运算器I"></a>第2章 运算方法和运算器I</h2><h3 id="数据与文字的表示方法"><a href="#数据与文字的表示方法" class="headerlink" title="数据与文字的表示方法"></a>数据与文字的表示方法</h3><h4 id="常用的数据表示格式"><a href="#常用的数据表示格式" class="headerlink" title="常用的数据表示格式"></a>常用的数据表示格式</h4><ol>
<li>定点表示：小数点的位置是固定的，可以表示纯小数或者纯整数</li>
<li>浮点表示：见CSAPP</li>
<li>十进制数格式：</li>
</ol>
<p>带有符号表示的二进制数：<mark>真值</mark><br>机器中把符号“数字化”的数：<mark>机器数</mark>或者<mark>机器码</mark></p>
<p>常用的机器码包括：(一般针对有符号数)</p>
<ul>
<li>原码：真值的符号位变成0&#x2F;1，0为+。</li>
<li>反码:反码就是二进制数<mark>除符号位以外</mark>的的各位数码</mark>0变为1，1变为0</mark></li>
<li>补码</li>
<li>移码</li>
</ul>
<p>补码整数表示略，记住按位取反再加一就可以<br>补码的定点小数表示如下：<br><img src="https://api2.mubu.com/v3/document_image/535cd946-0888-4aa0-98f7-2b4c95267e57-16175743.jpg" alt="定点小数表示"><br>这里注意，two’s complement是补码的英文，直译为2的补足部分，这里的模的意思和时钟的模为12相同，意为正数负数的补码表示相加就是模值。</p>
<p>反码和补码的关系：定点小数也满足整数的“按位取反再加一”的规则。<br><img src="https://api2.mubu.com/v3/document_image/82299582-3a0e-4d14-92cf-7d23426ff4ad-16175743.jpg" alt="关系"><br>特别的，+0的反码为：00000000(8位)<br>-0的反码为：11111111(8位)</p>
<p>关于移位运算，这是C语言中的<br><a href="https://blog.csdn.net/heiniaoyuyouling/article/details/4696586">C语言中的位移位运算</a></p>
<h2 id="补充：课程概要"><a href="#补充：课程概要" class="headerlink" title="补充：课程概要"></a>补充：课程概要</h2><p><img src="https://api2.mubu.com/v3/document_image/5b9257b0-af72-46f3-9bf1-c75e55e111da-16175743.jpg" alt="课程要求嘿嘿嘿"></p>
<p>课程内容，左边是期中前学的，右边是期中后学的。</p>
<p><img src="https://api2.mubu.com/v3/document_image/d40960c4-d339-42d5-9d88-6b1c4d2cd975-16175743.jpg" alt="课程内容哈哈哈"></p>
<p>实验内容<br><img src="https://api2.mubu.com/v3/document_image/02f22f78-2b45-4c0e-8823-06862639af5d-16175743.jpg" alt="实验内容"></p>
]]></content>
      <categories>
        <category>笔记</category>
      </categories>
      <tags>
        <tag>course</tag>
        <tag>计组</tag>
      </tags>
  </entry>
  <entry>
    <title>碎碎念</title>
    <url>/2022/02/25/%E7%A2%8E%E7%A2%8E%E5%BF%B5/</url>
    <content><![CDATA[<p> 在szh坚持不懈的摸鱼之下博客勉勉强强搭起来了，一些后续功能就‘明天’(咳咳)再说。</p>
<p> 这个寒假全程阴间作息，导致对即将到来的网课丝毫没有能好好听课的信心。真是颓废混蛋并且一事无成啊。</p>
<p> 对人际关系也变得十分懒怠，有时候会无缘无故的消失一整天，自己躲起来干一些浪费时间的事情，看一些无聊的小说或者剧，就好像缩在一个安全的壳里一样。等到开学被迫见到许多人的时候这种情况应该会改善很多，到时候会怎么样大概完全取决于我朋友们的肚量(bushi)。</p>
<p> 哦对，寒假学会了擀饺子皮儿，这样看也不算一事无成。</p>
<p> 第二大的遗憾就要数今年冬天没见到雪吧。</p>
]]></content>
      <categories>
        <category>随笔</category>
      </categories>
      <tags>
        <tag>少年听雨</tag>
      </tags>
  </entry>
  <entry>
    <title>计网笔记_1.3网络软件</title>
    <url>/2022/03/09/%E8%AE%A1%E7%BD%91%E7%AC%94%E8%AE%B0_1-3%E7%BD%91%E7%BB%9C%E8%BD%AF%E4%BB%B6/</url>
    <content><![CDATA[<h2 id="1-3网络软件"><a href="#1-3网络软件" class="headerlink" title="1.3网络软件"></a>1.3网络软件</h2><h3 id="协议层次结构Protocol-Hierarchies"><a href="#协议层次结构Protocol-Hierarchies" class="headerlink" title="协议层次结构Protocol Hierarchies"></a>协议层次结构Protocol Hierarchies</h3><ul>
<li>为了降低网络设计的复杂性，绝大多数网络都组成了层次栈(a stack of layer)或(a stack of level)。从某种意义上来说，每一层都是一种虚拟机，第n层向第n+1层提供服务。</li>
<li><strong>协议protocol</strong>：通信双方的一种约定</li>
<li><strong>对等体peera</strong>：不同机器上同一层的实体</li>
<li><strong>物理层次Physical medium</strong>：铜线，光纤</li>
<li><strong>接口interface</strong>：Defines which <mark>primitive operations原语操作</mark> and services the lower layer makes available to the upper one，类似于函数调用的接口</li>
<li><strong>网络体系结构</strong>&#x3D;层+协议A set of layers and protocols 网络体系结构<strong>不包括</strong>协议内部的实现细节，也不包括接口的规范。</li>
<li><img src="https://api2.mubu.com/v3/document_image/3f2c4521-c474-4228-8629-b682619c7f09-16175743.jpg"></li>
<li>支持第五层虚拟通信的信息流：假设在第5层上运行的一个应用进程产生了一.条消息M,并且将它传递给第4层以便传给对等进程;第4层在消息的前面加上一一个头(header)， 用来标识该消息，并且把结果传给第3层;该头包含了一些控制信息，例如地址，主要被目标机器的第4层用来递交消息。某些层次所用的控制信息还可以包含消息序号(以防下层不保留消息顺序)、消息大小、时间等。<br><img src="https://api2.mubu.com/v3/document_image/4bd06528-60a8-4049-8fb3-63709fa51e26-16175743.jpg" alt="支持第五层虚拟通信的信息流"><br>在许多网络中，对于第4层上传递的消息<strong>大小</strong>没有任何限制，但是几乎所有第3层协议对此总会强加一个限制。因此，第3层必须把入境消息分割成较小的单元，即数据包或包(packet)，并且在每个数据包前面加上第3层的头。在这个例子中，M被分割成两部分：M1和M2，这两部分内容是被单独传输的。</li>
</ul>
<p><strong>第3层</strong>决定使用哪些<strong>输出线路</strong>，并且把分组传递给第2层；<strong>第2层不仅在每一个信息上加上一个头信息还要加上一个尾</strong>，然后将结果传输单元送给第1层以便进行物理传输。在接收端的机器上，消息自底向上逐层传递，<strong>在传递过程中各个头被逐层剥离</strong>。没有一个第n层以下的头会被传递到第n层。</p>
<h3 id="层次设计问题Design-Issues-for-the-Layers"><a href="#层次设计问题Design-Issues-for-the-Layers" class="headerlink" title="层次设计问题Design Issues for the Layers"></a>层次设计问题Design Issues for the Layers</h3><ul>
<li>可靠性Reliability</li>
<li>网络发展Network evolution：可拓展性，网络互通性</li>
<li>资源分配Resource allocation：统计复用，流量控制</li>
<li>QoS（服务质量）：quality of service，包括的指标有 带宽bandwidth、延迟delay&#x2F;latency、抖动（Jitter）</li>
<li>安全Security</li>
</ul>
<h3 id="面向连接的服务和无连接的服务"><a href="#面向连接的服务和无连接的服务" class="headerlink" title="面向连接的服务和无连接的服务"></a>面向连接的服务和无连接的服务</h3><ul>
<li>面向连接Connection-oriented: telephone system，需要建立连接</li>
<li>无连接Connection-less: postal system，不需要事先建立连接</li>
</ul>
<p><img src="https://api2.mubu.com/v3/document_image/79af3961-0095-4781-b7a7-31ed1b3022a9-16175743.jpg" alt="Six different types of service"><br><img src="https://api2.mubu.com/v3/document_image/848bcef7-4baa-40fb-a356-7d14ac0f211e-16175743.jpg" alt="Six different types of service"></p>
<p><mark>Point：有链接的服务<strong>不一定</strong>是可靠的！</mark></p>
<h3 id="服务原语Service-Primitives"><a href="#服务原语Service-Primitives" class="headerlink" title="服务原语Service Primitives"></a>服务原语Service Primitives</h3><ul>
<li>原语可能看起来像函数调用中的函数名字</li>
<li>PDU: Protocol Data Unit协议数据单元：信息在对等体之间交换</li>
</ul>
<h3 id="服务与协议之间的关系"><a href="#服务与协议之间的关系" class="headerlink" title="服务与协议之间的关系"></a>服务与协议之间的关系</h3><p>服务和协议是两个截然不同的概念，它们之间的区别非常重要。</p>
<ul>
<li><p><strong><mark>服务是指</mark>某一层向它上一层提供的一-组原语(操作)。服务定义了该层准备代表其用户执行哪些操作，但是它并不涉及如何实现这些操作。</strong> 服务与两层之间的接口有关，<strong>低层是服务提供者，而上层是服务用户</strong>。</p>
</li>
<li><p>与此不同的是，**<mark>协议是</mark>一组规则，规定了同一层上对等实体之间所交换的数据包或者报文的格式和含义<strong>。对等实体利用协议来实现它们的服务定义，它们可以自由地改变协议，只要不改变呈现给它们用户的服务即可。按照这种方式，</strong>服务和协议是完全相分离的**，这是任何一个网络设计者应该很好理解的关键概念。</p>
</li>
<li><p>不改变服务，可以随意改变协议。</p>
</li>
</ul>
]]></content>
      <categories>
        <category>笔记</category>
      </categories>
      <tags>
        <tag>course</tag>
        <tag>计网</tag>
      </tags>
  </entry>
  <entry>
    <title>计网阅读笔记_1 引言</title>
    <url>/2022/03/02/%E8%AE%A1%E7%BD%91%E9%98%85%E8%AF%BB%E7%AC%94%E8%AE%B0/</url>
    <content><![CDATA[<h2 id="术语-szh这个电脑垃圾的自我科普"><a href="#术语-szh这个电脑垃圾的自我科普" class="headerlink" title="术语(szh这个电脑垃圾的自我科普)"></a>术语(szh这个电脑垃圾的自我科普)</h2><ul>
<li><strong>CN</strong> computer networks计算机网络</li>
<li>interconnected 相互连接的：这两台计算机能够交换信息</li>
<li><strong>计算机网络</strong>和<strong>分布式系统</strong>的关键差别：由一组独立计算机组成的分布式系统呈现给用户的是一个关联系统。在用户看来，分布式系统只是一个模型或泛型。通常在操作系统之上有一层软件负责实现这个模型，这个软件就称为中间件(middleware)。最著名的分布式系统是万维网(World Wide Web)。分布式系统是建立在网络之上的软件系统。网络与分布式系统之间的区别在于软件(尤指操作系统)，而非硬件。</li>
<li>VPN(virtual private networks) 虚拟专用网络:目的是试图终结“地理位置的束缚”</li>
<li>Server 服务器：数据存储的性能最强大的计算机</li>
<li>client 客户机：其他人使用的机器</li>
<li>IP telephone IP电话：通过计算机网络打电话，如果采用了Internet技术则称为IP语音(VoIP,voice over IP)。</li>
<li>e-commerce，electronic commerce 电子商务：简单来说就是网购</li>
<li><a href="www.acm.org">ACM</a> <a href="www.computer.org">IEEE</a></li>
<li>peer-to-peer 对等通信：每个人可以与一个或者多个其他人通信，这里的客户端和服务器没有明确的分工。许多对等系统没有任何中央内容数据库，如BitTorrent(没错就是那个BT！)</li>
<li>instant messaging 即时消息：UNIX系统有talk程序，允许两人相互实时的输入消息。多人参与的消息服务有Twitter，这样发送的消息称为tweet。</li>
<li>wiki是一个协作型的网站。最著名的Wikipedia，一部任何人都可以编辑的百科全书</li>
<li>由于to和2在英文中发音相同，电子商务有了一些可爱的小标签，B:business，C：customer，G：government<img src="https://api2.mubu.com/v3/document_image/019df50c-e675-4f48-8bc2-40bb369e9264-16175743.jpg" alt="小标签"></li>
<li>ubiquitous computing 普适计算：生活中的各种用电，燃气，传感器读数等</li>
<li><strong>RFID Radio Frequency IDentification 射频识别</strong>：可能将现实世界变成物联网</li>
<li><strong>hotspot 无线热点</strong></li>
<li>m-commerce，mobile-commerce 移动商务：就是手机支付</li>
<li><strong>NFC(Near Field Communication)近场通信</strong>：让手机可以充当RFID的智能卡和附近的RFID读写器互动完成消费支付</li>
<li>sensor network 传感器网络：由感知物理世界状态的结点组成，这些节点收集它们感知到的信息，并通过无线中继发送。</li>
<li>network neutrality 网络中立：通信不应该区分内容，来源，或内容提供者的论点</li>
<li><strong>PAN Personal Area Network 个域网</strong>：蓝牙，RFID等</li>
<li><strong>LAN local area network 局域网</strong>：私有网络，被广泛用来连接个人计算机和消费类电子设备，使他们能够共享资源(打印机)和交换信息。当局域网被用于公司消费时，被称为企业网络。</li>
<li>互联处理器的分类<img src="https://api2.mubu.com/v3/document_image/ffd1649a-0364-40e4-9a71-3dfc1b206f25-16175743.jpg" alt="互联处理器的分类"></li>
<li>AP(Access Point)接入点、(wireless router)无线路由器、(base station)基站：局域网中的一个与每台计算机进行通信的设备。</li>
<li>[quite interesting]无线局域网的一个标准称为<strong>IEEE 802.11</strong>，俗称<strong>WiFi</strong>(chapter 4 详细介绍)。而IEEE802.3的俗称我以太网(ethernet)。具体模型如图。<img src="https://api2.mubu.com/v3/document_image/5aa08c52-c410-4645-a2bd-bf0188f70298-16175743.jpg" alt="无线和有线LAN"></li>
<li><strong>MAN Metropolitan Area Network 城域网</strong></li>
<li><strong>WAN Wide Area Network 广域网</strong>：一般跨越比较大的地理区域。我们把专门运行用户程序的计算机称为<strong>主机(host)<strong>，连接这些主机的网络其余部分称为</strong>通信子网(communication subnet)</strong>,或简称<strong>子网(subnet)</strong></li>
<li>多数广域网中，子网由<strong>传输线路(transmission)</strong> 和 <strong>交换元素(switching element)</strong> 组成。</li>
<li>传输线路：负责在机器之间移动比特，可以是铜线光纤无线链路</li>
<li>交换元素：switching element简称<strong>交换机switch</strong>，是专用的计算机，负责链接两条或者两条以上的线路。</li>
<li>Internet：特指每天使用的互联网</li>
<li>Internet：连接在一起的网络</li>
<li>网关&#x3D;&#x3D;路由器</li>
<li>传输技术的分类：按照transmission technology分类：分为 广播式(broadcast)和点到点(point-to-point)链路</li>
<li>点到点传输只有一个发送方和一个接收方，故也称为单播。</li>
<li>而广播网络上：通信信道被网络上的所有机器共享，一般只要特定的一个机器对其响应，无线网络是一个常见例子。特别的，如果地址字段使用一组特殊的编码，所有机器(Broadcasting广播)或者一组机器(multicasting组播)都会对其响应。</li>
<li>互联网络：两个或多个网络的链接，Internet是最著名的互联网络实例。</li>
</ul>
]]></content>
      <categories>
        <category>笔记</category>
      </categories>
      <tags>
        <tag>course</tag>
        <tag>计网</tag>
      </tags>
  </entry>
  <entry>
    <title>计网笔记_1.4参考模型Reference Models</title>
    <url>/2022/03/09/%E8%AE%A1%E7%BD%91%E7%AC%94%E8%AE%B0_1-4%E5%8F%82%E8%80%83%E6%A8%A1%E5%9E%8B/</url>
    <content><![CDATA[<h2 id="1-4-参考模型Reference-Models"><a href="#1-4-参考模型Reference-Models" class="headerlink" title="1.4 参考模型Reference Models"></a>1.4 参考模型Reference Models</h2><h3 id="OSI参考模型-The-OSI-Reference-Model"><a href="#OSI参考模型-The-OSI-Reference-Model" class="headerlink" title="OSI参考模型 The OSI Reference Model"></a>OSI参考模型 The OSI Reference Model</h3><ul>
<li>OSI体系结构是要求记住的，因为计算机网络的核心是计算机体系结构。但是OSI结构在日常生活中也不咋见到，用的人少。</li>
</ul>
<p><img src="https://api2.mubu.com/v3/document_image/ba8267b6-e3d1-404d-a27e-4811a15b006f-16175743.jpg" alt="OSI体系结构"></p>
<p>对应的中文对照：<br><img src="https://api2.mubu.com/v3/document_image/89804771-1c92-46b4-b0eb-a65599fe34c4-16175743.jpg" alt="OSI体系结构-zh"></p>
<p>一般的，在网络里的路由设备只需要完成1，2，3层的协议就可以(如框框里圈起来的part)</p>
<ol>
<li>物理层：使用通信的信道传输原始的bit流</li>
</ol>
<ul>
<li>使用多少伏特表示1，多少伏特表示0</li>
<li>每个比特持续多长时间</li>
<li>传输是否能够双向同时(simultaneously)发送信息</li>
<li>初始链接是如何链接以及如何释放的，比如打电话，挂断，一般链接是按时间计费的</li>
</ul>
<ol start="2">
<li>数据链路层：把原始的传输转化成逻辑的信道。一句话总结，就是(可靠的)数据帧的传输 <mark><strong>Point To Point点到点</strong></mark></li>
</ol>
<ul>
<li>将到达的数据变成一块一块的frame(帧）(这个功能仅部分的数据链路层拥有)</li>
<li>如果要求可靠的传输，要对正确的数据帧发送comfirm</li>
<li>流量控制：保持快速传输，防止数据传输缓慢</li>
<li>广播网络：管理共享信道的使用权力(access)</li>
</ul>
<ol start="3">
<li><p>网络层：主要控制的是路由和转发的问题，控制子网的运行</p>
<ul>
<li>传递forwarding</li>
<li>路由router：静态路由；规划路由；<strong>动态路由highly dynamic</strong>；</li>
<li>拥塞控制congestion</li>
<li>QoS：delay延迟，transit time传输时间，jitter抖动, 带宽，丢包率etc.</li>
<li>异构网络互联Heterogeneous networks interconnection</li>
<li>广播网络 routing is simple</li>
</ul>
</li>
<li><p>传输层：<mark>End To End端到端</mark></p>
<ul>
<li>从上层接受数据，把这些数据分成小的数据单元(if needed)，把这些数据单元</li>
<li>决定向会话层提供何种服务</li>
<li>控制拥塞</li>
</ul>
</li>
<li><p>会话层：通信的双方(虚拟层面的不同机器)建立会话链接</p>
<ul>
<li>对话控制</li>
<li>令牌Token管理</li>
<li>同步：断点重传</li>
</ul>
</li>
<li><p>表示层：信息传递的 <em>语法和语义</em></p>
<ul>
<li>抽象定义被传输的信息。比如大端小端。</li>
</ul>
</li>
<li><p>应用层：包括通常被用户使用的各种协议</p>
</li>
</ol>
<h3 id="TCP-x2F-IP参考模型-The-TCP-x2F-IP-Reference-Model"><a href="#TCP-x2F-IP参考模型-The-TCP-x2F-IP-Reference-Model" class="headerlink" title="TCP&#x2F;IP参考模型 The TCP&#x2F;IP Reference Model"></a>TCP&#x2F;IP参考模型 The TCP&#x2F;IP Reference Model</h3><p>TCP&#x2F;IP参考模型：<strong>右侧</strong><br><img src="https://api2.mubu.com/v3/document_image/1823c7c6-b736-4899-8148-728753f9aeaa-16175743.jpg" alt="TCP/IP参考模型"></p>
<ul>
<li><p>网络接口层(PPT)，中文书上叫链路层，这不是一个真正意义上的层，而是主机与传输路线之间的一个接口。</p>
</li>
<li><p>互联网层：一个基于无连接互联网络的数据包交换网络</p>
<ul>
<li>定义了一种官方的数据包和协议格式，叫做IP(Internet Protocol)</li>
<li>网络层的工作是把IP数据包发送到他们应该去往的地方，这里面又包括了路由问题，避免拥塞问题</li>
</ul>
</li>
<li><p>传输层：</p>
<ol>
<li><p><strong>传输控制协议TCP (Transmission Control Protocol)</strong></p>
<ul>
<li>面向连接的、可靠的、字节流</li>
<li>碎片化fragment字节流</li>
<li>重新组装接收到的信息到输出流(保证了传输顺序)</li>
<li>流量控制，避免淹没</li>
</ul>
</li>
<li><p><strong>用户数据报协议: The UDP(User Datagram Protocol)</strong></p>
<ul>
<li>无连接的、不可靠的、消息流(一块一块的发送消息)</li>
<li>适用于不想要TCP有序控制和流量控制，而宁可自己提供这些功能的应用程序。比如及时交付比准确交付更重要的应用，比如语音和视频通话</li>
</ul>
</li>
</ol>
</li>
<li><p>应用层：略<br>TCP&#x2F;IP模型以及各种需要学习的协议<br><img src="https://api2.mubu.com/v3/document_image/4eba9cfd-9f3d-4a91-9fec-d12fdf829f32-16175743.jpg" alt="一览表"><br>中文简化版：<br><img src="https://api2.mubu.com/v3/document_image/53465012-ec7b-4b4b-9891-e2637d5dbbbc-16175743.jpg" alt="中文简化版："></p>
</li>
</ul>
<h3 id="OSI参考模型与TCP-x2F-IP参考模型的比较"><a href="#OSI参考模型与TCP-x2F-IP参考模型的比较" class="headerlink" title="OSI参考模型与TCP&#x2F;IP参考模型的比较"></a>OSI参考模型与TCP&#x2F;IP参考模型的比较</h3><p>略，gzc没细讲，有兴趣让看书。</p>
<h3 id="OSI模型和协议的评判"><a href="#OSI模型和协议的评判" class="headerlink" title="OSI模型和协议的评判"></a>OSI模型和协议的评判</h3><p>gzc没讲，书上骂了一通，可以看个乐。截个图感受下。<br><img src="https://api2.mubu.com/v3/document_image/e13d23a0-3431-4a4b-8f63-d2118c9b9c80-16175743.jpg" alt="乐"></p>
<h3 id="TCP-x2F-IP参考模型的评判"><a href="#TCP-x2F-IP参考模型的评判" class="headerlink" title="TCP&#x2F;IP参考模型的评判"></a>TCP&#x2F;IP参考模型的评判</h3><p>没讲，没看</p>
<h2 id="1-5网络实例"><a href="#1-5网络实例" class="headerlink" title="1.5网络实例"></a>1.5网络实例</h2><p>没咋讲，没啥要记的东西，略</p>
]]></content>
      <categories>
        <category>笔记</category>
      </categories>
      <tags>
        <tag>course</tag>
        <tag>计网</tag>
      </tags>
  </entry>
</search>
