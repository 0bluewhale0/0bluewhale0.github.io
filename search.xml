<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>szh的博客</title>
    <url>/2024/04/11/SZH%E7%9A%84%E5%8D%9A%E5%AE%A2/</url>
    <content><![CDATA[<p><em>为天地立心，为生民立命，为往圣继绝学，为万世开太平</em></p>
]]></content>
  </entry>
  <entry>
    <title>睡了一整天，头疼</title>
    <url>/2022/03/12/%E7%9D%A1%E4%BA%86%E4%B8%80%E6%95%B4%E5%A4%A9%EF%BC%8C%E5%A4%B4%E7%96%BC/</url>
    <content><![CDATA[<p>又睡了一整天<br>脑壳疼<br>醒着的时间都在无所事事<br>中午喝粥把粥打翻了<br>十九岁了还没学会吃饭，简直比小时候还没用<br>明明知道规律的作息才能让人快乐<br>还是沉溺于一时的安逸，招致更大的痛苦<br>瘫着睡觉的时间出去逛街也好，给影姐姐攒石头也罢<br>总比神志不清的浪费要强<br>以此记录，下不为例。</p>
]]></content>
      <categories>
        <category>随笔</category>
      </categories>
      <tags>
        <tag>少年听雨</tag>
        <tag>废物言论</tag>
      </tags>
  </entry>
  <entry>
    <title>【share】毛概教材2021</title>
    <url>/2022/03/01/%E6%AF%9B%E6%A6%82%E6%95%99%E6%9D%90/</url>
    <content><![CDATA[<p><a href="https://pan.baidu.com/s/1CsdIdIfRZiUktfCOGZgixg">2021新版毛概教材带跳转目录</a><br>提取码：hhhh</p>
<p>若分享链接失效请留言，会及时更新。</p>
]]></content>
      <categories>
        <category>source</category>
      </categories>
      <tags>
        <tag>course</tag>
        <tag>source share</tag>
      </tags>
  </entry>
  <entry>
    <title>碎碎念</title>
    <url>/2022/02/25/%E7%A2%8E%E7%A2%8E%E5%BF%B5/</url>
    <content><![CDATA[<p> 在szh坚持不懈的摸鱼之下博客勉勉强强搭起来了，一些后续功能就‘明天’(咳咳)再说。</p>
<p> 这个寒假全程阴间作息，导致对即将到来的网课丝毫没有能好好听课的信心。真是颓废混蛋并且一事无成啊。</p>
<p> 对人际关系也变得十分懒怠，有时候会无缘无故的消失一整天，自己躲起来干一些浪费时间的事情，看一些无聊的小说或者剧，就好像缩在一个安全的壳里一样。等到开学被迫见到许多人的时候这种情况应该会改善很多，到时候会怎么样大概完全取决于我朋友们的肚量(bushi)。</p>
<p> 哦对，寒假学会了擀饺子皮儿，这样看也不算一事无成。</p>
<p> 第二大的遗憾就要数今年冬天没见到雪吧。</p>
]]></content>
      <categories>
        <category>随笔</category>
      </categories>
      <tags>
        <tag>少年听雨</tag>
      </tags>
  </entry>
  <entry>
    <title>计网阅读笔记_1 引言</title>
    <url>/2022/03/02/%E8%AE%A1%E7%BD%91%E7%AC%94%E8%AE%B0_1%E5%BC%95%E8%A8%80/</url>
    <content><![CDATA[<h2 id="术语-szh这个电脑垃圾的自我科普"><a href="#术语-szh这个电脑垃圾的自我科普" class="headerlink" title="术语(szh这个电脑垃圾的自我科普)"></a>术语(szh这个电脑垃圾的自我科普)</h2><ul>
<li><strong>CN</strong> computer networks计算机网络</li>
<li>interconnected 相互连接的：这两台计算机能够交换信息</li>
<li><strong>计算机网络</strong>和<strong>分布式系统</strong>的关键差别：由一组独立计算机组成的分布式系统呈现给用户的是一个关联系统。在用户看来，分布式系统只是一个模型或泛型。通常在操作系统之上有一层软件负责实现这个模型，这个软件就称为中间件(middleware)。最著名的分布式系统是万维网(World Wide Web)。分布式系统是建立在网络之上的软件系统。网络与分布式系统之间的区别在于软件(尤指操作系统)，而非硬件。</li>
<li>VPN(virtual private networks) 虚拟专用网络:目的是试图终结“地理位置的束缚”</li>
<li>Server 服务器：数据存储的性能最强大的计算机</li>
<li>client 客户机：其他人使用的机器</li>
<li>IP telephone IP电话：通过计算机网络打电话，如果采用了Internet技术则称为IP语音(VoIP,voice over IP)。</li>
<li>e-commerce，electronic commerce 电子商务：简单来说就是网购</li>
<li><a href="www.acm.org">ACM</a> <a href="www.computer.org">IEEE</a></li>
<li>peer-to-peer 对等通信：每个人可以与一个或者多个其他人通信，这里的客户端和服务器没有明确的分工。许多对等系统没有任何中央内容数据库，如BitTorrent(没错就是那个BT！)</li>
<li>instant messaging 即时消息：UNIX系统有talk程序，允许两人相互实时的输入消息。多人参与的消息服务有Twitter，这样发送的消息称为tweet。</li>
<li>wiki是一个协作型的网站。最著名的Wikipedia，一部任何人都可以编辑的百科全书</li>
<li>由于to和2在英文中发音相同，电子商务有了一些可爱的小标签，B:business，C：customer，G：government<img src="https://api2.mubu.com/v3/document_image/019df50c-e675-4f48-8bc2-40bb369e9264-16175743.jpg" alt="小标签"></li>
<li>ubiquitous computing 普适计算：生活中的各种用电，燃气，传感器读数等</li>
<li><strong>RFID Radio Frequency IDentification 射频识别</strong>：可能将现实世界变成物联网</li>
<li><strong>hotspot 无线热点</strong></li>
<li>m-commerce，mobile-commerce 移动商务：就是手机支付</li>
<li><strong>NFC(Near Field Communication)近场通信</strong>：让手机可以充当RFID的智能卡和附近的RFID读写器互动完成消费支付</li>
<li>sensor network 传感器网络：由感知物理世界状态的结点组成，这些节点收集它们感知到的信息，并通过无线中继发送。</li>
<li>network neutrality 网络中立：通信不应该区分内容，来源，或内容提供者的论点</li>
<li><strong>PAN Personal Area Network 个域网</strong>：蓝牙，RFID等</li>
<li><strong>LAN local area network 局域网</strong>：私有网络，被广泛用来连接个人计算机和消费类电子设备，使他们能够共享资源(打印机)和交换信息。当局域网被用于公司消费时，被称为企业网络。</li>
<li>互联处理器的分类<img src="https://api2.mubu.com/v3/document_image/ffd1649a-0364-40e4-9a71-3dfc1b206f25-16175743.jpg" alt="互联处理器的分类"></li>
<li>AP(Access Point)接入点、(wireless router)无线路由器、(base station)基站：局域网中的一个与每台计算机进行通信的设备。</li>
<li>[quite interesting]无线局域网的一个标准称为<strong>IEEE 802.11</strong>，俗称<strong>WiFi</strong>(chapter 4 详细介绍)。而IEEE802.3的俗称我以太网(ethernet)。具体模型如图。<img src="https://api2.mubu.com/v3/document_image/5aa08c52-c410-4645-a2bd-bf0188f70298-16175743.jpg" alt="无线和有线LAN"></li>
<li><strong>MAN Metropolitan Area Network 城域网</strong></li>
<li><strong>WAN Wide Area Network 广域网</strong>：一般跨越比较大的地理区域。我们把专门运行用户程序的计算机称为<strong>主机(host)<strong>，连接这些主机的网络其余部分称为</strong>通信子网(communication subnet)</strong>,或简称<strong>子网(subnet)</strong></li>
<li>多数广域网中，子网由<strong>传输线路(transmission)</strong> 和 <strong>交换元素(switching element)</strong> 组成。</li>
<li>传输线路：负责在机器之间移动比特，可以是铜线光纤无线链路</li>
<li>交换元素：switching element简称<strong>交换机switch</strong>，是专用的计算机，负责链接两条或者两条以上的线路。</li>
<li>Internet：特指每天使用的互联网</li>
<li>Internet：连接在一起的网络</li>
<li>网关&#x3D;&#x3D;路由器</li>
<li>传输技术的分类：按照transmission technology分类：分为 广播式(broadcast)和点到点(point-to-point)链路</li>
<li>点到点传输只有一个发送方和一个接收方，故也称为单播。</li>
<li>而广播网络上：通信信道被网络上的所有机器共享，一般只要特定的一个机器对其响应，无线网络是一个常见例子。特别的，如果地址字段使用一组特殊的编码，所有机器(Broadcasting广播)或者一组机器(multicasting组播)都会对其响应。</li>
<li>互联网络：两个或多个网络的链接，Internet是最著名的互联网络实例。</li>
</ul>
]]></content>
      <categories>
        <category>笔记</category>
      </categories>
      <tags>
        <tag>course</tag>
        <tag>计网</tag>
      </tags>
  </entry>
  <entry>
    <title>计网笔记_物理层1</title>
    <url>/2022/03/10/%E8%AE%A1%E7%BD%91%E7%AC%94%E8%AE%B0-%E7%89%A9%E7%90%86%E5%B1%821/</url>
    <content><![CDATA[<p>学不会了，单纯进行一个复制粘贴<br>可能应该去信通蹭蹭课了 <font size="7">悲</font></p>
<h2 id="基础概念"><a href="#基础概念" class="headerlink" title="基础概念"></a>基础概念</h2><ul>
<li>Channel<strong>信道</strong>：传输信息的媒体</li>
<li>Bit Rate<strong>数据率</strong>：数据传输速率（bps）</li>
<li>Baud<strong>波特</strong>：符号&#x2F;码元传输速率 $1Baud &#x3D;(\log_2{V})bps$，其中V是信号的电平级数(理解为<strong>进制数</strong>，每一个电平级数用一个符号表示，换成二进制位数就是这个公式)，比如电平级数为2时，波特速率等于比特速率。如果在数字传输过程中，0V、2V、4V和6V分别表示00、01、10和11，那么每个码元有四种状态00、01、10和11。每个码元代表两个二进制数字。大部分情况下，波特速率&gt; bit速率。<br><img src="https://api2.mubu.com/v3/document_image/164707928280699fe.jpg" alt="111"></li>
<li>Propagation Speed<strong>传播速度</strong>：通信线路上，信号单位时间内传送的距离(m&#x2F;s)。光速：$3\times10^8m&#x2F;s$。</li>
<li>Bandwidth<strong>带宽</strong>：<mark>在单位时间里，能发送的最大比特数</mark>PPT上写“信号占用的频率范围(HZ)不知道是什么意思。但是HZ本身就是($s^{-1}$)，和bps($\tiny\cfrac{比特数}{传输这些比特所用的时间}$)的单位一样。<br>补充↑：带宽的两种意思<br><img src="https://api2.mubu.com/v3/document_image/58cded3d-2107-41e9-8fd9-f601dcece668-16175743.jpg" alt="补充：带宽的两种意思"></li>
<li>Channel Capacity信道容量：信道的<strong>最大</strong>数据率</li>
<li>Throughput吞吐量：网络容量的度量，表示单位时间内网络可以传送的数据位数(bps)</li>
<li>Bit Error Rate误码率(BER):信道传输可靠性指标，可能会很低，如$10^{-12}$等<br>$P&#x3D;\cfrac{传送错误的位数}{传输总位数}$</li>
<li>Delay时延：<mark>从向网络中发送数据块的第一比特开始，到最后一位数据被接收所经历的时间</mark>。包括发送时间+传播时间+处理时间+排队时间，</li>
<li>时延的组成<ul>
<li>传播时延：信号通过传输介质的时间</li>
<li>发送时延：设备发送一个数据块所需要的时间<br>$发送时延&#x3D;\cfrac{数据块长度}{信道带宽}$，这里的带宽指的是<mark>单位时间内能发送的最大比特数</mark>。注意二者单位的统一。</li>
<li>处理时间：交换机&#x2F;路由器检查数据、选路的时间</li>
<li>排队时延：在交换机&#x2F;路由器中排队等待的时间</li>
</ul>
</li>
<li>几种通信方式：Simplex【单工链路】, Half-duplex【半双工链路】, Full-duplex【全双工】，其中，全双工是最常见的。<ul>
<li>Simplex【单工链路】：只能单向，腾讯课堂这样的</li>
<li>Half-duplex【半双工链路】：双方都可发送可接受，但不能同时发送和接受，对讲机</li>
<li>Full-duplex【全双工】：双车道一样的，可以同时发送和接受</li>
</ul>
</li>
<li>并行通信Parallel$\tiny平行的并行的$ transmission<img src="https://api2.mubu.com/v3/document_image/4e3e79a4-f002-46e0-8a92-1c0805542a31-16175743.jpg"></li>
<li>串行通信Serial transmission(在不同机器之间的通信较为常见)<img src="https://api2.mubu.com/v3/document_image/284a2a06-99a7-47f1-9a85-b9c144192557-16175743.jpg"><ul>
<li>同步Synchronous</li>
<li>异步Asynchronous，始终不需要同步，仅需三条线路（一来一回+地线）便可以完成，（同步需要五条线，一来一回需要两个时钟信号）但收发双方的时钟可能出现偏差，一般应用于短距离通信。</li>
</ul>
</li>
</ul>
<h2 id="2-1数据通信的理论基础"><a href="#2-1数据通信的理论基础" class="headerlink" title="2.1数据通信的理论基础"></a>2.1数据通信的理论基础</h2><h3 id="傅里叶分析"><a href="#傅里叶分析" class="headerlink" title="傅里叶分析"></a>傅里叶分析</h3><p>高数学到狗肚子里去了，根本看不懂(大草)。</p>
<h3 id="带宽有限的信号"><a href="#带宽有限的信号" class="headerlink" title="带宽有限的信号"></a>带宽有限的信号</h3><p>不要求会算，但是要求理解带宽对速率的限制。(我不理解，哭哭)</p>
<ul>
<li><p>没有设备能够不损耗能量地传输信号</p>
</li>
<li><p>所有的传输设施对于不同傅里叶分量的衰减程度并不相同，从而导致接收端收到的结果信号发生也就是说，如果等量的衰减，是不会变形的。</p>
</li>
<li><p><strong>带宽的定义</strong>：课本和ppt是这样说的</p>
<blockquote>
<p>一般情况下对导线而言，在0到某个频率$f_c$的这段范围内，振幅在传输过程中不会衰减(这里$f_c$可以用Hz(赫兹)来度量)，而在此截止频率$f_c$之上的所有频率的振幅都将有不同程度的减弱。这段在传输过程中振幅不会明显减弱的频率的宽度就称为带宽(bandwidth)。通常引用的带宽是指从0到使得接收能量保留一半的那个频率位置。ps:滤波器一般可用来进一步限制信号的带宽。</p>
</blockquote>
</li>
<li><p>决定带宽的因素：<strong>带宽是传输介质的一种物理性质</strong>，由以下决定</p>
<ul>
<li>介质的构成</li>
<li>介质的厚度</li>
<li>电线或者光纤(也就是介质 阿巴阿巴)的长度</li>
</ul>
</li>
</ul>
<h3 id="信道的最大数据速率"><a href="#信道的最大数据速率" class="headerlink" title="信道的最大数据速率"></a>信道的最大数据速率</h3><blockquote>
<p>待补充，回头写</p>
</blockquote>
<ol>
<li><p>Nyquist’s theorem (1924)<br>If a signal has been run through a low-pass filter of bandwidth H,  the signal can be completely reconstructed by making 2H samples per second<br>  C&#x3D;2Hlog2V</p>
</li>
<li><p>Shannon’s Theorem (1948)</p>
</li>
</ol>
<blockquote>
<p>$\tiny摘自百度百科$<br>类比：城市道路上的汽车的车速（业务速率）和什么有关系？<br>除了和自己车的动力有关之外，主要还受限于道路的宽度（带宽）和车辆多少、红灯疏密等其他干扰因素（信噪比）。<br>俗话说：“<strong>有线的资源是无限的，而无线的资源却是有限的。</strong>”无线信道并不是可以任意增加传送信息的速率，它受其固有规律的制约，就像城市道路上的车一样不能想开多快就开多快，还受到道路宽度、其他车辆数量等因素影响。这个规律就是香农定理。香农定理是所有通信制式最基本的原理，它描述了有限带宽、有随机热噪声信道的最大传输速率与信道带宽、信号噪声功率比之间的关系。</p>
</blockquote>
<p>香农定理由如下的公式给出: <mark><br>$C&#x3D;W\times\log_2{(1+\frac{S}{N})}$<br></mark>其中C是可得到的链路速度，W是链路的带宽，S是平均信号<strong>功率</strong>,N是平均噪声<strong>功率</strong>，信噪比（S&#x2F;N）通常用分贝（dB）表示，<mark>$分贝数&#x3D;10\times\log_{10}{(\frac{S}{N})}$</mark>,这里的分贝不同于平时认为的声音大小的单位，而在实际上，声音大小的单位也并不是分贝(分贝本身是一个同单位比值),而是用声压大小反映，由于分贝取对数的特性符合日常表达需要，所以用声压对应的分贝来表示声音大小。真正的分贝分为两种，功率之比和幅值之比，香农公式这里采用的是功率之比的定义。详见 <a href="https://zhuanlan.zhihu.com/p/22821588">这里</a> 以及<a href="https://baike.baidu.com/item/%E5%88%86%E8%B4%9D/553473">这里</a>(后者为百度百科)。</p>
<h2 id="2-2引导性传输介质Guided-Transmission-Media"><a href="#2-2引导性传输介质Guided-Transmission-Media" class="headerlink" title="2.2引导性传输介质Guided Transmission Media"></a>2.2引导性传输介质Guided Transmission Media</h2><p>这块儿懒得记，应该是兴趣性了解即可，书上还有点儿笑话看。<br>这儿就记个大纲</p>
<ol>
<li><p>磁介质 Manetic Media<br>“永远不要低估一辆满载着磁带在高速公路上飞驰的旅行车的带宽”<br>高带宽高延迟</p>
</li>
<li><p>双绞线 Twisted Pair<br>  到6类为止，所有的双绞线都成为<strong>非屏蔽双绞线(UTP)</strong>(unsheild twisted pair)<br>  7类双绞线在每对、整个线缆外加一个屏蔽层</p>
</li>
<li><p>同轴电缆 coaxial cable<br>  <font size="2">cable(钢索，电缆)</font><br>  <img src="https://api2.mubu.com/v3/document_image/7fdd5fef-512e-438a-8002-5c152f02f95d-16175743.jpg" alt="1"></p>
</li>
<li><p>电线 Power line</p>
</li>
<li><p>光纤 （Fiber Cables）&amp; 光缆<br>根据中心光纤的直径，分为多模、单模<br>多模以不同的角度来回反射着前进，单模直径只有几光波，几乎沿直线传输</p>
</li>
</ol>
<blockquote>
<p>参考链接<br><a href="https://zhuanlan.zhihu.com/p/350152827#:~:text=%E5%88%86%E8%B4%9D%E4%B8%8E%E4%BF%A1%E5%99%AA%E6%AF%94%E7%9A%84%E5%85%B3%E7%B3%BB%E4%B8%BA%20%3A%20db%3D10lg%EF%BC%88s%2Fn%EF%BC%89%20%E4%BF%A1%E5%99%AA%E6%AF%94%E6%98%AF%E4%BF%A1%E5%8F%B7%E7%94%B5%E5%8E%8B%E5%AF%B9%E4%BA%8E%20%E5%99%AA%E5%A3%B0%E7%94%B5%E5%8E%8B%20%E7%9A%84%E6%AF%94%E5%80%BC%EF%BC%8C%E9%80%9A%E5%B8%B8%E7%94%A8%E7%AC%A6%E5%8F%B7%20s%2Fn%20%E6%9D%A5%E8%A1%A8%E7%A4%BA%E3%80%82,%E4%B8%BA45~55db%EF%BC%8C%E8%8B%A5%E4%B8%BA50db%EF%BC%8C%E5%88%99%E5%9B%BE%E5%83%8F%E6%9C%89%E5%B0%91%E9%87%8F%E5%99%AA%E5%A3%B0%EF%BC%8C%E4%BD%86%E5%9B%BE%E5%83%8F%E8%B4%A8%E9%87%8F%E8%89%AF%E5%A5%BD%EF%BC%9B%E8%8B%A5%E4%B8%BA60db%EF%BC%8C%E5%88%99%E5%9B%BE%E5%83%8F%E8%B4%A8%E9%87%8F%E4%BC%98%E8%89%AF%EF%BC%8C%E4%B8%8D%E5%87%BA%E7%8E%B0%E5%99%AA%E5%A3%B0%E3%80%82%20%E7%BD%91%E9%A1%B5%E4%BF%A1%E5%99%AA%E6%AF%94%20%E6%9F%A5%E8%AF%A2%E4%BF%A1%E5%99%AA%E6%AF%94%20%28Signal%2FNoise%29%EF%BC%8C%E5%8E%9F%E6%98%AF%E7%94%B5%20%E5%A3%B0%E5%AD%A6%20%E9%A2%86%E5%9F%9F%E4%B8%AD%E7%9A%84%E4%B8%80%E4%B8%AA%E6%A6%82%E5%BF%B5%EF%BC%8C%E6%8C%87%E5%A3%B0%20%E9%9F%B3%E6%BA%90%20%E4%BA%A7%E7%94%9F%E6%9C%80%E5%A4%A7%E4%B8%8D%E5%A4%B1%E7%9C%9F%E5%A3%B0%E9%9F%B3%E4%BF%A1%E5%8F%B7%E5%BC%BA%E5%BA%A6%E4%B8%8E%E5%90%8C%E6%97%B6%E5%8F%91%E5%87%BA%E5%99%AA%E9%9F%B3%E5%BC%BA%E5%BA%A6%E4%B9%8B%E9%97%B4%E7%9A%84%E6%AF%94%E7%8E%87%E3%80%82">信噪比</a></p>
</blockquote>
<!---
## 2.4通信卫星

## 2.5数字调制与多路复用

## 2.6公共电话交换网络

## 2.7移动电话系统

## 2.8有线电视

--->
]]></content>
      <categories>
        <category>笔记</category>
      </categories>
      <tags>
        <tag>course</tag>
        <tag>计网</tag>
      </tags>
  </entry>
  <entry>
    <title>计网笔记-物理层2</title>
    <url>/2022/03/20/%E8%AE%A1%E7%BD%91%E7%AC%94%E8%AE%B0-%E7%89%A9%E7%90%86%E5%B1%822/</url>
    <content><![CDATA[<h2 id="2-3无线传输"><a href="#2-3无线传输" class="headerlink" title="2.3无线传输"></a>2.3无线传输</h2><p>胡乱写一写，基本都是截图，物理层实在让人不懂。大哭。</p>
<h3 id="电磁频谱-The-Electromagnetic-Spectrum"><a href="#电磁频谱-The-Electromagnetic-Spectrum" class="headerlink" title="电磁频谱 The Electromagnetic Spectrum"></a>电磁频谱 The Electromagnetic Spectrum</h3><ul>
<li>Electromagnetic spectrum and its uses for communication↓</li>
</ul>
<p><img src="https://api2.mubu.com/v3/document_image/8786acbc-2976-43f0-b3f3-f321a9e9f27f-16175743.jpg" alt="111"></p>
<img src="https://api2.mubu.com/v3/document_image/6f159e0b-7dc7-449a-9ccf-c049c2037e08-16175743.jpg" width="400" height="80">

<ul>
<li>Using narrow frequency band大多数信息传输使用窄带通信</li>
<li>Spread Spectrum (bluetooth, wlan, cdma)<br>  FHSS: 跳频扩频Frequency hopping spread spectrum<br>Hedy Lamarr (1913-2000)<br>  DSSS: 直接序列扩频Direct sequence spread spectrum<br>  UWB 超宽带通信(Ultra-WideBand) communication.<br>  UWB sends a series of rapid pulses, varying their positions to communicate information.</li>
<li>除非特别声明，我们假设所有的传输都使用窄带频段</li>
</ul>
<h3 id="无线电传输"><a href="#无线电传输" class="headerlink" title="无线电传输"></a>无线电传输</h3><ul>
<li>无线电传输是像个气球一样沿着各个方向传播的，所以不用刻意对齐(下面那个微波传输就得对齐)</li>
<li>无线电频率RF（Radio Frequency）</li>
<li>路径损耗 不同于引导性介质上的信号衰减是以y&#x3D;b-kx的大致形式衰减，无线电波随着距离增加，信号能量<strong>衰减的速度</strong>以距离的-2次幂下降(相当于下降的斜率在不断减小)，这意味着无线电信号可以传播很长的距离。</li>
</ul>
<h3 id="微波传输"><a href="#微波传输" class="headerlink" title="微波传输"></a>微波传输</h3><p>在超过100MHZ的频段，电磁波沿着直线传播，微波在$10^8$~$10^{10}$之间，所以也沿着直线传播</p>
<p><font size="10" color="green">其余跳过</font></p>
<h2 id="2-5数字调制与多路复用"><a href="#2-5数字调制与多路复用" class="headerlink" title="2.5数字调制与多路复用"></a>2.5数字调制与多路复用</h2><ul>
<li>定义：比特与代表它们的信号之间的转换过程称为数字调制( digital modulation)。</li>
<li>信道通常被多个信号共享。毕竟，用单根线缆传送几个信号比为每个信号铺设一-根线缆要便利得多。这种信道的共享形式称为<strong>多路复用技术( multiplexing)</strong></li>
</ul>
<h3 id="基带传输"><a href="#基带传输" class="headerlink" title="基带传输"></a>基带传输</h3><p><strong>baseband transmission</strong>：如何把数据比特<strong>直接</strong>转换成信号的一些方案。信号的传输占有传输介质上从零到最大值之间的<strong>全部频率</strong>，而最大频率则取决于信令signaling速率。是<strong>有线介质</strong>普遍使用的一种调制方法。</p>
<p><img src="https://api2.mubu.com/v3/document_image/bddb772e-158f-4cb6-bea6-8b23247de897-16175743.jpg" alt="2"></p>
<h3 id="通带传输"><a href="#通带传输" class="headerlink" title="通带传输"></a>通带传输</h3><p><strong>passband transmission</strong>：通过调节载波信号的<strong>幅值、相位或频率</strong>来运载比特的方案。信号占据了以载波信号频率为中心的一段频带。是<strong>无线和光纤信道</strong>最常使用的调制方法。<strong>只能</strong>在<strong>给定的频带</strong>中传输信号。<br><img src="https://api2.mubu.com/v3/document_image/da181503-0649-4509-8685-ccb573dbc8e9-16175743.jpg" alt="5"><br>(a):<!---QPSK Quadrature phase shift keying 正交相移键控---><br>(b):<!---QAM-16 Quadrature Ampllitude Modulation 正交调幅---><br>(c):<!---QAM-64---><br>答案用注释藏起来了，忘记了的话请F12或者看物理层ppt（皮）。</p>
<h3 id="频分复用"><a href="#频分复用" class="headerlink" title="频分复用"></a>频分复用</h3><p><strong>Frequency Division Multiplexing</strong><br><img src="https://api2.mubu.com/v3/document_image/3330e8fa-d7c5-4714-981e-a11d2c733e0d-16175743.jpg" alt="6"><br>(a) The original bandwidths.<br>(b) The bandwidths raised in frequency.<br>(b) The multiplexed channel.</p>
<h3 id="时分复用"><a href="#时分复用" class="headerlink" title="时分复用"></a>时分复用</h3><p><strong>Time Division Multiplexing</strong><br><img src="https://api2.mubu.com/v3/document_image/25bd7832-63ea-4af4-bd0b-d3840f628701-16175743.jpg" alt="7"></p>
<h3 id="码分复用"><a href="#码分复用" class="headerlink" title="码分复用"></a>码分复用</h3><p><strong>CDMA – Code Division Multiple Access</strong><br><img src="https://api2.mubu.com/v3/document_image/872dce89-17c9-4d4a-86b7-917e4d74bf72-16175743.jpg" alt="8"></p>
<h2 id="2-6公共电话交换网络"><a href="#2-6公共电话交换网络" class="headerlink" title="2.6公共电话交换网络"></a>2.6公共电话交换网络</h2><h3 id="本地回路：调制解调器、ADSL和Fiber"><a href="#本地回路：调制解调器、ADSL和Fiber" class="headerlink" title="本地回路：调制解调器、ADSL和Fiber"></a>本地回路：调制解调器、ADSL和Fiber</h3><ul>
<li><p>调制解调器<br>modem&#x3D;modulator调制器+demodulator解调器<br>  <img src="https://api2.mubu.com/v3/document_image/83e23a78-739d-43e5-b983-5d3124d35d73-16175743.jpg" alt="3"><br>  <img src="https://api2.mubu.com/v3/document_image/a57925f1-a68b-4ffc-be9d-670cef75ec7c-16175743.jpg" alt="4"></p>
</li>
<li><p>ADSL<br>OFDM编码方式可以用于这些信道上发送数据，在ASDL文档中经常被称为DMT（Discrete MultiTone 离散多音），<br><img src="https://api2.mubu.com/v3/document_image/d9af3f5c-ec1c-42ed-bd97-bce7a5faecea-16175743.jpg" alt="ADSL"><br><img src="https://api2.mubu.com/v3/document_image/d1dd9c3e-bb15-4b57-a9db-b9e2c51fa569-16175743.jpg" alt="ADSL"></p>
</li>
<li><p>一种典型的ADSL设备配置<br><img src="https://api2.mubu.com/v3/_document_image_/2f6e0473-4016-4f14-b3b1-fc226a81ae3f-16175743.jpg" alt="2"></p>
</li>
</ul>
<p><img src="https://api2.mubu.com/v3/document_image/06a0d98b-2b88-4ffa-b206-fb0bf7da2f77-16175743.jpg" alt="3"></p>
<ul>
<li>FttH:fiber to the home 光纤入户<br><img src="https://api2.mubu.com/v3/document_image/41c22d14-89c8-4ce0-a45a-64ca90f8b07e-16175743.jpg" alt="5"></li>
</ul>
<h3 id="中继和多路复用"><a href="#中继和多路复用" class="headerlink" title="中继和多路复用"></a>中继和多路复用</h3><p>trunk and Multiplexing</p>
<ul>
<li><p>PCM：脉冲编码调制，关于为什么是64bps、125Чsec<br><img src="https://api2.mubu.com/v3/document_image/ebff4d33-7a87-47a8-ae47-d69a7769b288-16175743.jpg" alt="10"></p>
</li>
<li><p>TDM时分多路复用<br><img src="https://api2.mubu.com/v3/document_image/b05b3ba8-0d7f-4a62-8e29-adbbc7c44f1a-16175743.jpg" alt="4"><br>The T1 carrier (1.544 Mbps).<br>E1 2.048Mbps</p>
</li>
<li><p><strong>TDM数据传输</strong><br><img src="https://api2.mubu.com/v3/document_image/9fc8a918-402c-449e-84cc-0f2a53540d7b-16175743.jpg" alt="2-8TDM数据传输"></p>
</li>
</ul>
<h3 id="交换"><a href="#交换" class="headerlink" title="交换"></a>交换</h3><p>电路交换和包交换的比较<br><img src="https://api2.mubu.com/v3/document_image/6b76cb90-5dc3-4e61-9c76-f241e1418af4-16175743.jpg" alt="比较"><br><img src="https://api2.mubu.com/v3/document_image/ecc4e8fa-fd80-4174-b0e1-e4fa87b63b30-16175743.jpg" alt="比较"></p>
<p><img src="https://api2.mubu.com/v3/document_image/560e8f18-fd1a-430b-a28e-047656cd29eb-16175743.jpg" alt="课本上的图"></p>
<p><img src="https://api2.mubu.com/v3/document_image/74258e7a-36e5-4d57-aa37-097eaccfd52d-16175743.jpg" alt="画图画的包传输"></p>
]]></content>
      <categories>
        <category>笔记</category>
      </categories>
      <tags>
        <tag>course</tag>
        <tag>计网</tag>
      </tags>
  </entry>
  <entry>
    <title>计组笔记chapter2</title>
    <url>/2022/03/23/%E8%AE%A1%E7%BB%84%E7%AC%94%E8%AE%B0chapter2/</url>
    <content><![CDATA[<h2 id="IEEE浮点表示"><a href="#IEEE浮点表示" class="headerlink" title="IEEE浮点表示"></a>IEEE浮点表示</h2><p>规格化表示：<br><img src="https://api2.mubu.com/v3/document_image/edff1550-2019-44d5-94b3-a8bca0ca4809-16175743.jpg" alt="规格化"></p>
<p>特殊的浮点数<br><img src="https://api2.mubu.com/v3/document_image/42891536-e62d-4cd9-b358-64b73d22d52e-16175743.jpg" alt="特殊的浮点数"></p>
<p>浮点数表示的范围<br><img src="https://api2.mubu.com/v3/document_image/1bca8a53-b91b-4811-b0f9-799f3261da15-16175743.jpg" alt="浮点数表示的范围"></p>
<p>小结：<br>对32位浮点数N：<br>◼ 若0 &lt; E &lt; 255，则<br>N ＝ (-1)s ×1.M ×2<br>E-127 ，规格化数表示<br>◼ 若E &#x3D; 0且M ＝ 0，则<br>N ＝ (-1)s 0，机器+0、-0表示<br>◼ 若E &#x3D; 0且M ≠ 0，则<br>N ＝ (-1)s × 0.M× 2<br>1-127 ，非规格化数表示<br>◼ 若E&#x3D; 255且M ＝ 0，则<br>N＝(-1)s∞（正无穷大，负无穷大）<br>◼ 若E &#x3D; 255且M ≠ 0，则<br>N ＝ NaN，非数NaN(Not a Number)</p>
<blockquote>
<p>十进制小数转二进制：<br>十进制的小数转换为二进制，主要是小数部分乘以2，取整数部分依次从左往右放在小数点后，直至小数点后为0。</p>
</blockquote>
<h2 id="ACSII码"><a href="#ACSII码" class="headerlink" title="ACSII码"></a>ACSII码</h2><p>数字：48（0011 0000）~ 57（0011 1001）   +10-1<br>大写字母：65（0100 0001）～90（0101 1010）   +26-1<br>小写字母：97（0110 0001）～122（0111 1010）   +26-1</p>
<h2 id="存储器中的字节序"><a href="#存储器中的字节序" class="headerlink" title="存储器中的字节序"></a>存储器中的字节序</h2><p>每个字节内部的顺序都是固定的，仅需考虑多个字节的字节间关系</p>
<ul>
<li>小端方式Little Endian<ul>
<li>低字节存放在小地址处，即低字节在前高字节后<br>x86处理器</li>
</ul>
</li>
<li>大端方式Big Endian<ul>
<li>低字节存放在大地址处，即高字节在前低字节后<br>SPARC处理器，IBM Power处理器</li>
</ul>
</li>
</ul>
<h2 id="补码"><a href="#补码" class="headerlink" title="补码"></a>补码</h2><p><img src="https://api2.mubu.com/v3/document_image/16483863477285a79.jpg" alt="证明补码减法"></p>
<h2 id="溢出"><a href="#溢出" class="headerlink" title="溢出"></a>溢出</h2><h3 id="整数溢出"><a href="#整数溢出" class="headerlink" title="整数溢出"></a>整数溢出</h3><p>正溢：运算结果为正，且超出机器所能表示的范围<br>负溢：运算结果为负，且超出机器所能表示的范围<br><img src="https://api2.mubu.com/v3/document_image/32378a93-fd0e-418c-932b-209ba715160d-16175743.jpg" alt="整数溢出"></p>
<h3 id="小数溢出"><a href="#小数溢出" class="headerlink" title="小数溢出"></a>小数溢出</h3><p>上溢：结果的绝对值大于机器所能表示的最大绝对值（+∞，－∞）<br>（overflow）<br>下溢：结果的绝对值小于机器所能表示的最小绝对值 （ 机器零 ）<br>（underflow）<br><img src="https://api2.mubu.com/v3/document_image/f3691e63-d615-4caa-9043-dbb945ed07bc-16175743.jpg" alt="小数溢出"></p>
<h3 id="检测方法"><a href="#检测方法" class="headerlink" title="检测方法"></a>检测方法</h3><ol>
<li><p><strong>双符号位</strong>法，又称<strong>变形补码</strong>，或者模四补码<br> 双符号位的补码也遵循加法法则。<br> 在计算中：<br> 两个符号位均参加运算<br> 最高符号位上产生的进位要丢掉</p>
<p> 溢出检测规则：<br> ◆两数相加后，结果的符号位出现“01”或“10”两种情况时，表示发生溢出（也就是<strong>最高的两位异或</strong>）<br> ◆最高符号位永远表示结果的正确符号</p>
</li>
<li><p><strong>单符号位</strong>法<br> 溢出的逻辑表达式为<br> $V&#x3D;C_f⊕C_0$<br> $C_f$为符号位产生的进位，$C_0$为最高有效位产生的进位</p>
</li>
</ol>
<h2 id="定点乘法运算算法"><a href="#定点乘法运算算法" class="headerlink" title="定点乘法运算算法"></a>定点乘法运算算法</h2><h3 id="原码一位乘法运算"><a href="#原码一位乘法运算" class="headerlink" title="原码一位乘法运算"></a>原码一位乘法运算</h3><h3 id="无符号的阵列乘法"><a href="#无符号的阵列乘法" class="headerlink" title="无符号的阵列乘法"></a>无符号的阵列乘法</h3><h3 id="有符号的阵列乘法"><a href="#有符号的阵列乘法" class="headerlink" title="有符号的阵列乘法"></a>有符号的阵列乘法</h3><p>补码一位乘法运算（不要求）<br>原码两位乘法运算（不要求）<br>直接补码并行乘法（不要求）</p>
]]></content>
      <categories>
        <category>笔记</category>
      </categories>
      <tags>
        <tag>course</tag>
        <tag>计组</tag>
      </tags>
  </entry>
  <entry>
    <title>计网笔记-1综述</title>
    <url>/2022/03/09/%E8%AE%A1%E7%BD%91%E7%AC%94%E8%AE%B0-1%E7%BB%BC%E8%BF%B0/</url>
    <content><![CDATA[<h2 id="1-3网络软件"><a href="#1-3网络软件" class="headerlink" title="1.3网络软件"></a>1.3网络软件</h2><h3 id="协议层次结构Protocol-Hierarchies"><a href="#协议层次结构Protocol-Hierarchies" class="headerlink" title="协议层次结构Protocol Hierarchies"></a>协议层次结构Protocol Hierarchies</h3><ul>
<li>为了降低网络设计的复杂性，绝大多数网络都组成了层次栈(a stack of layer)或(a stack of level)。从某种意义上来说，每一层都是一种虚拟机，第n层向第n+1层提供服务。</li>
<li><strong>协议protocol</strong>：通信双方的一种约定</li>
<li><strong>对等体peers</strong>：不同机器上同一层的实体</li>
<li><strong>物理层次Physical medium</strong>：铜线，光纤</li>
<li><strong>接口interface</strong>：Defines which <mark>primitive operations原语操作</mark> and services the lower layer makes available to the upper one，类似于函数调用的接口</li>
<li><strong>网络体系结构</strong>&#x3D;层+协议A set of layers and protocols 网络体系结构<strong>不包括</strong>协议内部的实现细节，也不包括接口的规范。</li>
<li><img src="https://api2.mubu.com/v3/document_image/3f2c4521-c474-4228-8629-b682619c7f09-16175743.jpg"></li>
<li>支持第五层虚拟通信的信息流：假设在第5层上运行的一个应用进程产生了一.条消息M,并且将它传递给第4层以便传给对等进程;第4层在消息的前面加上一一个头(header)， 用来标识该消息，并且把结果传给第3层;该头包含了一些控制信息，例如地址，主要被目标机器的第4层用来递交消息。某些层次所用的控制信息还可以包含消息序号(以防下层不保留消息顺序)、消息大小、时间等。<br><img src="https://api2.mubu.com/v3/document_image/4bd06528-60a8-4049-8fb3-63709fa51e26-16175743.jpg" alt="支持第五层虚拟通信的信息流"><br>在许多网络中，对于第4层上传递的消息<strong>大小</strong>没有任何限制，但是几乎所有第3层协议对此总会强加一个限制。因此，第3层必须把入境消息分割成较小的单元，即数据包或包(packet)，并且在每个数据包前面加上第3层的头。在这个例子中，M被分割成两部分：M1和M2，这两部分内容是被单独传输的。</li>
</ul>
<p><strong>第3层</strong>决定使用哪些<strong>输出线路</strong>，并且把分组传递给第2层；<strong>第2层不仅在每一个信息上加上一个头信息还要加上一个尾</strong>，然后将结果传输单元送给第1层以便进行物理传输。在接收端的机器上，消息自底向上逐层传递，<strong>在传递过程中各个头被逐层剥离</strong>。没有一个第n层以下的头会被传递到第n层。</p>
<h3 id="层次设计问题Design-Issues-for-the-Layers"><a href="#层次设计问题Design-Issues-for-the-Layers" class="headerlink" title="层次设计问题Design Issues for the Layers"></a>层次设计问题Design Issues for the Layers</h3><ul>
<li>可靠性Reliability</li>
<li>网络发展Network evolution：可拓展性，网络互通性</li>
<li>资源分配Resource allocation：统计复用，流量控制</li>
<li>QoS（服务质量）：quality of service，包括的指标有 带宽bandwidth、延迟delay&#x2F;latency、抖动（Jitter）</li>
<li>安全Security</li>
</ul>
<h3 id="面向连接的服务和无连接的服务"><a href="#面向连接的服务和无连接的服务" class="headerlink" title="面向连接的服务和无连接的服务"></a>面向连接的服务和无连接的服务</h3><ul>
<li>面向连接Connection-oriented: telephone system，需要建立连接</li>
<li>无连接Connection-less: postal system，不需要事先建立连接</li>
</ul>
<p><img src="https://api2.mubu.com/v3/document_image/79af3961-0095-4781-b7a7-31ed1b3022a9-16175743.jpg" alt="Six different types of service"><br><img src="https://api2.mubu.com/v3/document_image/848bcef7-4baa-40fb-a356-7d14ac0f211e-16175743.jpg" alt="Six different types of service"></p>
<p><mark>Point：有链接的服务<strong>不一定</strong>是可靠的！</mark></p>
<h3 id="服务原语Service-Primitives"><a href="#服务原语Service-Primitives" class="headerlink" title="服务原语Service Primitives"></a>服务原语Service Primitives</h3><ul>
<li>原语可能看起来像函数调用中的函数名字</li>
<li>PDU: Protocol Data Unit协议数据单元：信息在对等体之间交换</li>
</ul>
<h3 id="服务与协议之间的关系"><a href="#服务与协议之间的关系" class="headerlink" title="服务与协议之间的关系"></a>服务与协议之间的关系</h3><p>服务和协议是两个截然不同的概念，它们之间的区别非常重要。</p>
<ul>
<li><p><strong><mark>服务是指</mark>某一层向它上一层提供的一-组原语(操作)。服务定义了该层准备代表其用户执行哪些操作，但是它并不涉及如何实现这些操作。</strong> 服务与两层之间的接口有关，<strong>低层是服务提供者，而上层是服务用户</strong>。</p>
</li>
<li><p>与此不同的是，**<mark>协议是</mark>一组规则，规定了同一层上对等实体之间所交换的数据包或者报文的格式和含义<strong>。对等实体利用协议来实现它们的服务定义，它们可以自由地改变协议，只要不改变呈现给它们用户的服务即可。按照这种方式，</strong>服务和协议是完全相分离的**，这是任何一个网络设计者应该很好理解的关键概念。</p>
</li>
<li><p>不改变服务，可以随意改变协议。</p>
</li>
</ul>
<h2 id="1-4-参考模型Reference-Models"><a href="#1-4-参考模型Reference-Models" class="headerlink" title="1.4 参考模型Reference Models"></a>1.4 参考模型Reference Models</h2><h3 id="OSI参考模型-The-OSI-Reference-Model"><a href="#OSI参考模型-The-OSI-Reference-Model" class="headerlink" title="OSI参考模型 The OSI Reference Model"></a>OSI参考模型 The OSI Reference Model</h3><ul>
<li>OSI体系结构是要求记住的，因为计算机网络的核心是计算机体系结构。但是OSI结构在日常生活中也不咋见到，用的人少。</li>
</ul>
<p><img src="https://api2.mubu.com/v3/document_image/ba8267b6-e3d1-404d-a27e-4811a15b006f-16175743.jpg" alt="OSI体系结构"></p>
<p>对应的中文对照：<br><img src="https://api2.mubu.com/v3/document_image/89804771-1c92-46b4-b0eb-a65599fe34c4-16175743.jpg" alt="OSI体系结构-zh"></p>
<p>一般的，在网络里的路由设备只需要完成1，2，3层的协议就可以(如框框里圈起来的part)</p>
<ol>
<li>物理层：使用通信的信道传输原始的bit流</li>
</ol>
<ul>
<li>使用多少伏特表示1，多少伏特表示0</li>
<li>每个比特持续多长时间</li>
<li>传输是否能够双向同时(simultaneously)发送信息</li>
<li>初始链接是如何链接以及如何释放的，比如打电话，挂断，一般链接是按时间计费的</li>
</ul>
<ol start="2">
<li>数据链路层：把原始的传输转化成逻辑的信道。一句话总结，就是(可靠的)数据帧的传输 <mark><strong>Point To Point点到点</strong></mark></li>
</ol>
<ul>
<li>将到达的数据变成一块一块的frame(帧）(这个功能仅部分的数据链路层拥有)</li>
<li>如果要求可靠的传输，要对正确的数据帧发送comfirm</li>
<li>流量控制：保持快速传输，防止数据传输缓慢</li>
<li>广播网络：管理共享信道的使用权力(access)</li>
</ul>
<ol start="3">
<li><p>网络层：主要控制的是路由和转发的问题，控制子网的运行</p>
<ul>
<li>传递forwarding</li>
<li>路由router：静态路由；规划路由；<strong>动态路由highly dynamic</strong>；</li>
<li>拥塞控制congestion</li>
<li>QoS：delay延迟，transit time传输时间，jitter抖动, 带宽，丢包率etc.</li>
<li>异构网络互联Heterogeneous networks interconnection</li>
<li>广播网络 routing is simple</li>
</ul>
</li>
<li><p>传输层：<mark>End To End端到端</mark></p>
<ul>
<li>从上层接受数据，把这些数据分成小的数据单元(if needed)，把这些数据单元</li>
<li>决定向会话层提供何种服务</li>
<li>控制拥塞</li>
</ul>
</li>
<li><p>会话层：通信的双方(虚拟层面的不同机器)建立会话链接</p>
<ul>
<li>对话控制</li>
<li>令牌Token管理</li>
<li>同步：断点重传</li>
</ul>
</li>
<li><p>表示层：信息传递的 <em>语法和语义</em></p>
<ul>
<li>抽象定义被传输的信息。比如大端小端。</li>
</ul>
</li>
<li><p>应用层：包括通常被用户使用的各种协议</p>
</li>
</ol>
<h3 id="TCP-x2F-IP参考模型-The-TCP-x2F-IP-Reference-Model"><a href="#TCP-x2F-IP参考模型-The-TCP-x2F-IP-Reference-Model" class="headerlink" title="TCP&#x2F;IP参考模型 The TCP&#x2F;IP Reference Model"></a>TCP&#x2F;IP参考模型 The TCP&#x2F;IP Reference Model</h3><p>TCP&#x2F;IP参考模型：<strong>右侧</strong><br><img src="https://api2.mubu.com/v3/document_image/1823c7c6-b736-4899-8148-728753f9aeaa-16175743.jpg" alt="TCP/IP参考模型"></p>
<ul>
<li><p>网络接口层(PPT)，中文书上叫链路层，这不是一个真正意义上的层，而是主机与传输路线之间的一个接口。</p>
</li>
<li><p>互联网层：一个基于无连接互联网络的数据包交换网络</p>
<ul>
<li>定义了一种官方的数据包和协议格式，叫做IP(Internet Protocol)</li>
<li>网络层的工作是把IP数据包发送到他们应该去往的地方，这里面又包括了路由问题，避免拥塞问题</li>
</ul>
</li>
<li><p>传输层：</p>
<ol>
<li><p><strong>传输控制协议TCP (Transmission Control Protocol)</strong></p>
<ul>
<li>面向连接的、可靠的、字节流</li>
<li>碎片化fragment字节流</li>
<li>重新组装接收到的信息到输出流(保证了传输顺序)</li>
<li>流量控制，避免淹没</li>
</ul>
</li>
<li><p><strong>用户数据报协议: The UDP(User Datagram Protocol)</strong></p>
<ul>
<li>无连接的、不可靠的、消息流(一块一块的发送消息)</li>
<li>适用于不想要TCP有序控制和流量控制，而宁可自己提供这些功能的应用程序。比如及时交付比准确交付更重要的应用，比如语音和视频通话</li>
</ul>
</li>
</ol>
</li>
<li><p>应用层：略<br>TCP&#x2F;IP模型以及各种需要学习的协议<br><img src="https://api2.mubu.com/v3/document_image/4eba9cfd-9f3d-4a91-9fec-d12fdf829f32-16175743.jpg" alt="一览表"><br>中文简化版：<br><img src="https://api2.mubu.com/v3/document_image/53465012-ec7b-4b4b-9891-e2637d5dbbbc-16175743.jpg" alt="中文简化版："></p>
</li>
</ul>
<h3 id="OSI参考模型与TCP-x2F-IP参考模型的比较"><a href="#OSI参考模型与TCP-x2F-IP参考模型的比较" class="headerlink" title="OSI参考模型与TCP&#x2F;IP参考模型的比较"></a>OSI参考模型与TCP&#x2F;IP参考模型的比较</h3><p>略，gzc没细讲，有兴趣让看书。</p>
<h3 id="OSI模型和协议的评判"><a href="#OSI模型和协议的评判" class="headerlink" title="OSI模型和协议的评判"></a>OSI模型和协议的评判</h3><p>gzc没讲，书上骂了一通，可以看个乐。截个图感受下。<br><img src="https://api2.mubu.com/v3/document_image/e13d23a0-3431-4a4b-8f63-d2118c9b9c80-16175743.jpg" alt="乐"></p>
<h3 id="TCP-x2F-IP参考模型的评判"><a href="#TCP-x2F-IP参考模型的评判" class="headerlink" title="TCP&#x2F;IP参考模型的评判"></a>TCP&#x2F;IP参考模型的评判</h3><p>没讲，没看</p>
<h2 id="1-5网络实例"><a href="#1-5网络实例" class="headerlink" title="1.5网络实例"></a>1.5网络实例</h2><p>没咋讲，没啥要记的东西，略</p>
<h2 id="网络标准化1-6-Network-Standardization"><a href="#网络标准化1-6-Network-Standardization" class="headerlink" title="网络标准化1.6 Network Standardization"></a>网络标准化1.6 Network Standardization</h2><h3 id="电信领域有影响力的组织"><a href="#电信领域有影响力的组织" class="headerlink" title="电信领域有影响力的组织"></a>电信领域有影响力的组织</h3><p><strong>国际电信联盟ITU (International Telecommunication Union)</strong></p>
<p>主要部门：</p>
<ul>
<li>Radio communications(ITU-R)</li>
<li>Telecommunications Standardization(ITU-T)<br>$\tiny CCITT, Comité Consultatif International Télégraphique et Téléphonique (1956-1993)$</li>
<li>Development(ITU-D)</li>
</ul>
<h3 id="国际标准有影响力的组织"><a href="#国际标准有影响力的组织" class="headerlink" title="国际标准有影响力的组织"></a>国际标准有影响力的组织</h3><ul>
<li>国际标准化组织ISO (International Standards Organization):OSI是在计算机网络里的一个例子</li>
<li>ANSI (American National Standards Institute)</li>
<li>IEEE (Institute of Electrical and Electronics Engineers)<br><img src="https://api2.mubu.com/v3/document_image/8f845344-a835-4a69-8c8f-7cb3557ed8cf-16175743.jpg"><br>TCP&#x2F;IP是属于IETF的</li>
</ul>
<h3 id="计算机网络中的单位换算"><a href="#计算机网络中的单位换算" class="headerlink" title="计算机网络中的单位换算"></a>计算机网络中的单位换算</h3><p>不同于计算内存的KB,MB,GB(2的幂次)，因为内存总是2的幂次。</p>
<p>此外，这种情况下用大写的B表示Byte字节，而小写的b表示bit比特。</p>
<p><img src="https://api2.mubu.com/v3/document_image/50180420-6d48-47d4-ae7c-9647d65a4d18-16175743.jpg" alt="单位"></p>
<p>由于$milli和micro$都以字母m开头，所以两者必须进行区分。通常情况下，$m$ 代表毫(milli),而$μ$ (希腊字母)代表微(micro)。</p>
<p>在本书中，为了避免二义性，我们将使用符号KB、MB、GB和TB分别代表$2^{l0}、2^{20}、2^{30}$ 和 $2^{40}$ 字节;用符号 $kbps、Mbps、Gbps$ 和 $Tbps$分别代表$10^3,10^6,10^9和10^{12}$位&#x2F;秒。</p>
]]></content>
      <categories>
        <category>笔记</category>
      </categories>
      <tags>
        <tag>course</tag>
        <tag>计网</tag>
      </tags>
  </entry>
  <entry>
    <title>计组笔记_chapter1</title>
    <url>/2022/03/02/%E8%AE%A1%E7%BB%84%E7%AC%94%E8%AE%B0_chapter1/</url>
    <content><![CDATA[<p>纯纯进行一个课件的CTRL+C、CTRL+V，根本不知道是什么意思，哭。</p>
<h2 id="第1章-计算机概述"><a href="#第1章-计算机概述" class="headerlink" title="第1章  计算机概述"></a>第1章  计算机概述</h2><h3 id="计算机的分类和应用"><a href="#计算机的分类和应用" class="headerlink" title="计算机的分类和应用"></a>计算机的分类和应用</h3><p>通用计算机分类<br><img src="https://api2.mubu.com/v3/document_image/bb50f260-a398-4bd2-9a97-d6af00a88dff-16175743.jpg" alt="通用计算机分类"></p>
<p>面向应用的分类</p>
<ol>
<li>通用计算机</li>
<li>专用计算机&#x2F;嵌入式计算机(Embedded)</li>
</ol>
<p>计算机的应用<br>略</p>
<h3 id="计算机发展简史"><a href="#计算机发展简史" class="headerlink" title="计算机发展简史"></a>计算机发展简史</h3><h4 id="计算机的演进"><a href="#计算机的演进" class="headerlink" title="计算机的演进"></a>计算机的演进</h4><ol>
<li>第0代 机械时代（BC-1940</li>
<li>第1代 电子管时代（1943-1959）</li>
<li>第2代 晶体管时代（1960-1968）</li>
<li>第4代 超大规模集成电路时代（1978－现在）</li>
<li>第5代 量子计算机、光计算机、生物计算机？</li>
</ol>
<p>世界上第一台计算机：ENIAC</p>
<p>摩尔定律：集成电路芯片中晶体<br>管数量大体上每2年翻一番</p>
<h4 id="计算机的性能指标-易考"><a href="#计算机的性能指标-易考" class="headerlink" title="计算机的性能指标(易考)"></a><mark>计算机的性能指标</mark>(易考)</h4><p><img src="https://api2.mubu.com/v3/document_image/7ec2da4e-3831-44cd-b68a-6509f0314ac3-16175743.jpg"></p>
<p><img src="https://api2.mubu.com/v3/document_image/099dd094-3f03-436f-afde-e0e84afb42d6-16175743.jpg"></p>
<ol>
<li>响应时间</li>
<li>利用率</li>
<li>处理机字长</li>
<li>总线宽度</li>
<li>吞吐量：通常用KB、MB、GB(gigabit吉比特)和TB表示。B表示Byte(字节)，b表示bit。 $K\equiv2^{10},M\equiv2^{20},G\equiv2^{30}$</li>
<li>存储器带宽：一般用字节数&#x2F;秒表示</li>
<li>主频&#x2F;时钟周期:CPU的工作节拍受主时钟控制，主时钟不断产生固定频率的时钟，主时钟的频率f称为CPU的主频。<mark>度量单位是MHz（$10^6$）、GHz($10^9$)。</mark>可以理解为每秒有几个CPU时钟周期。<br>主频的倒数称为CPU时钟周期T，T&#x3D;1&#x2F;f，度量单位是微秒，纳秒。</li>
<li>CPU执行时间:表示CPU执行一段程序所占用的CPU时间，也可以用指令数目x每条指令的平均执行时间。而每条指令的平均执行时间可以用每条指令所需的平均时钟周期数目x时钟周期时间。<br> <mark>$\tiny CPU执行时间&#x3D;程序的指令数\times CPI\times CPU时钟周期时间$</mark></li>
<li><strong>CPI（Clock Cycles Per Instruction）</strong>:表示每条指令执行所需要的时钟周期数，或执行一条指令所需的平均时钟周期数。<br><mark>$\tiny CPI&#x3D;程序执行所需的CPU时钟周期总数÷程序的指令总数$</mark></li>
<li>MIPS：每秒百万指令数。<u>M:百万million ($\tiny\underline{10^6}$) ，I:instruction指令，PS:per second每秒</u><br><mark>$\tiny MIPS&#x3D;（指令总数 \div 程序执行时间）\times 10^{-6}$</mark></li>
<li>MFLOPS：每秒百万次浮点操作次数。<u>FLO：浮点操作</u><br>   <mark>$\tiny MFLOPS&#x3D;（程序中的浮点运算次数\div程序执行时间)\times 10^{-6}$</mark></li>
<li>TFLOPS：每秒万亿浮点操作次数。T:trillion兆，也就是万亿，$10^{12}$<br><mark>$\tiny TFLOPS&#x3D;（程序中的浮点运算次数\div程序执行时间)\times 10^{-12}$</mark></li>
<li>例题<br><img src="https://api2.mubu.com/v3/document_image/5e55985c-21a8-465c-bb80-b572227826a7-16175743.jpg" alt="例题"><br>题解<img src="https://api2.mubu.com/v3/document_image/1646144690025ebba.jpg" alt="tijie"><br><img src="https://api2.mubu.com/v3/document_image/304a5e77-8917-4021-8b27-adb2d0e25941-16175743.jpg"></li>
</ol>
<h3 id="计算机的硬件"><a href="#计算机的硬件" class="headerlink" title="计算机的硬件"></a>计算机的硬件</h3><h4 id="计算机的组成-五大部分"><a href="#计算机的组成-五大部分" class="headerlink" title="计算机的组成(五大部分)"></a>计算机的组成(五大部分)</h4><ol>
<li>存储器</li>
<li>运算器</li>
<li>控制器</li>
<li>输入输出设备</li>
</ol>
<ul>
<li>计算机内部，指令和数据均以二进制的形式存储，其中，指令包括操作码和地址码（对谁进行该操作）</li>
<li>关于rax,eax,ax,al:AL是低八位，AX是本名，16位，EAX是extended即扩展的意思，32bits，而RAX则是re-extended，再拓展，64位</li>
</ul>
<h3 id="计算机系统的层次结构"><a href="#计算机系统的层次结构" class="headerlink" title="计算机系统的层次结构"></a>计算机系统的层次结构</h3><p><img src="https://api2.mubu.com/v3/document_image/a3c75fab-9dd4-41bb-9fa5-53a7d99b2edf-16175743.jpg" alt="层次结构2"></p>
<p><img src="https://api2.mubu.com/v3/document_image/714d08ad-abe7-4606-8270-1b2566e12ba7-16175743.jpg" alt="层次结构3"></p>
<p>软件与硬件的逻辑等价性,理论上讲，任何软件算法都可以用硬件实现，反之亦然。<br><img src="https://api2.mubu.com/v3/document_image/9bbf4121-a5d0-441c-af82-a56e3781eb3a-16175743.jpg" alt="软件与硬件的逻辑等价性"></p>
<h2 id="第2章-运算方法和运算器I"><a href="#第2章-运算方法和运算器I" class="headerlink" title="第2章 运算方法和运算器I"></a>第2章 运算方法和运算器I</h2><h3 id="数据与文字的表示方法"><a href="#数据与文字的表示方法" class="headerlink" title="数据与文字的表示方法"></a>数据与文字的表示方法</h3><h4 id="常用的数据表示格式"><a href="#常用的数据表示格式" class="headerlink" title="常用的数据表示格式"></a>常用的数据表示格式</h4><ol>
<li>定点表示：小数点的位置是固定的，可以表示纯小数或者纯整数</li>
<li>浮点表示：见CSAPP</li>
<li>十进制数格式：</li>
</ol>
<p>带有符号表示的二进制数：<mark>真值</mark><br>机器中把符号“数字化”的数：<mark>机器数</mark>或者<mark>机器码</mark></p>
<p>常用的机器码包括：(一般针对有符号数)</p>
<ul>
<li>原码：真值的符号位变成0&#x2F;1，0为+。</li>
<li>反码:反码就是二进制数<mark>除符号位以外</mark>的的各位数码</mark>0变为1，1变为0</mark></li>
<li>补码</li>
<li>移码</li>
</ul>
<p>补码整数表示略，记住按位取反再加一就可以<br>补码的定点小数表示如下：<br><img src="https://api2.mubu.com/v3/document_image/535cd946-0888-4aa0-98f7-2b4c95267e57-16175743.jpg" alt="定点小数表示"><br>这里注意，two’s complement是补码的英文，直译为2的补足部分，这里的模的意思和时钟的模为12相同，意为正数负数的补码表示相加就是模值。</p>
<p>反码和补码的关系：定点小数也满足整数的“按位取反再加一”的规则。<br><img src="https://api2.mubu.com/v3/document_image/82299582-3a0e-4d14-92cf-7d23426ff4ad-16175743.jpg" alt="关系"><br>特别的，+0的反码为：00000000(8位)<br>-0的反码为：11111111(8位)</p>
<p>关于移位运算，这是C语言中的<br><a href="https://blog.csdn.net/heiniaoyuyouling/article/details/4696586">C语言中的位移位运算</a></p>
<h2 id="补充：课程概要"><a href="#补充：课程概要" class="headerlink" title="补充：课程概要"></a>补充：课程概要</h2><p><img src="https://api2.mubu.com/v3/document_image/5b9257b0-af72-46f3-9bf1-c75e55e111da-16175743.jpg" alt="课程要求嘿嘿嘿"></p>
<p>课程内容，左边是期中前学的，右边是期中后学的。</p>
<p><img src="https://api2.mubu.com/v3/document_image/d40960c4-d339-42d5-9d88-6b1c4d2cd975-16175743.jpg" alt="课程内容哈哈哈"></p>
<p>实验内容<br><img src="https://api2.mubu.com/v3/document_image/02f22f78-2b45-4c0e-8823-06862639af5d-16175743.jpg" alt="实验内容"></p>
]]></content>
      <categories>
        <category>笔记</category>
      </categories>
      <tags>
        <tag>course</tag>
        <tag>计组</tag>
      </tags>
  </entry>
  <entry>
    <title>计网笔记-数据链路层1</title>
    <url>/2022/03/30/%E8%AE%A1%E7%BD%91%E7%AC%94%E8%AE%B0_%E6%95%B0%E6%8D%AE%E9%93%BE%E8%B7%AF%E5%B1%821/</url>
    <content><![CDATA[<p>开头👴先抄一个gzc的思维导图：<br><img src="https://api2.mubu.com/v3/document_image/f9fae159-374d-41e5-99cf-6bee7b25ccc9-16175743.jpg" alt="思维导图"></p>
<h2 id="3-1数据链路层的设计问题"><a href="#3-1数据链路层的设计问题" class="headerlink" title="3.1数据链路层的设计问题"></a>3.1数据链路层的设计问题</h2><h3 id="3-1-1提供给网络层的服务"><a href="#3-1-1提供给网络层的服务" class="headerlink" title="3.1.1提供给网络层的服务"></a>3.1.1提供给网络层的服务</h3><ol>
<li><p>数据链路层的功能</p>
<ol>
<li>向网络层提供一个定义良好的服务接口。</li>
<li>处理传输错误。</li>
<li>调节数据流,确保慢速的接收方不会被快速的发送方淹没。</li>
</ol>
</li>
<li><p>提供给网络层的服务</p>
<ol>
<li><p>Unacknowledged connectionless service.<br> Most LANs局域网 use unacknowledged connectionless service </p>
</li>
<li><p>Acknowledged connectionless无连接的，也就是不用事先建立通路 service.<br>  This service is useful over unreliable channels, such as wireless  systems。给一个ACK，有确认的服务</p>
</li>
<li><p>Acknowledged connection-oriented service</p>
<pre><code>- Connection establishment
- Timer
- Sequence number 若ACKnumber丢了，防止重复
</code></pre>
</li>
</ol>
</li>
</ol>
<p>当使用面向连接的服务时，数据传输必须经过三个不同的阶段。在第一个阶段,要建立连接，双方初始化各种变量和计数器，这些变量和计数器记录了哪些帧已经接收到，哪些帧还没有收到。在第二个阶段，才真正传输一个或者多个数据帧。在第三个也是最后一个阶段中，连接被释放，所有的变量、缓冲区以及其他用于维护该连接的资源也随之被释放。</p>
<h3 id="3-1-2成帧Framing"><a href="#3-1-2成帧Framing" class="headerlink" title="3.1.2成帧Framing"></a>3.1.2成帧Framing</h3><h4 id="字符计数"><a href="#字符计数" class="headerlink" title="字符计数"></a>字符计数</h4><p><img src="https://api2.mubu.com/v3/document_image/8ed3423d-ef66-42da-aea0-416c2fee6873-16175743.jpg" alt="字符计数"><br>一旦出错：运气不好的话所有的帧都不能正确识别</p>
<h4 id="字符填充法（byte-stuffing）"><a href="#字符填充法（byte-stuffing）" class="headerlink" title="字符填充法（byte stuffing）"></a>字符填充法（byte stuffing）</h4><p><img src="https://api2.mubu.com/v3/document_image/9d9674ff-e6e8-46a2-ae6c-1851829cbd44-16175743.jpg" alt="字符填充法"></p>
<p>帧标志出错了：每两个帧之间至少有一个帧标志，仅影响当前帧。<br>问题：发送的信息含有很多控制字符，需要转译的字符大大增加<br><strong>开销：overhead</strong>，跟需要发送的数据相比，额外添加的转义字符所占的比例，比如全是需要转译的字符的信息，overhead就是100%。</p>
<h4 id="比特填充（bit-stuffing）"><a href="#比特填充（bit-stuffing）" class="headerlink" title="比特填充（bit stuffing）"></a>比特填充（bit stuffing）</h4><p>每个帧的开头结尾都是一个special bit pattern, 01111110 ，也就是16进制的7EH，当数据内容出现连续的1时，每遇到五个1添加一个0（硬件不管这5个1后面是0还是1），接收方做相反的工作。另外在<br><img src="https://api2.mubu.com/v3/document_image/c7e3cce3-443d-4224-b633-bc6f9cefff4b-16175743.jpg" alt="bit stuffing"><br>(a) The original data.<br>(b) The data as they appear on the line.<br>(c) The data as they are stored in receiver’s memory after destuffing.<br>就是每隔五个1插入一个0</p>
<h4 id="物理层编码违例"><a href="#物理层编码违例" class="headerlink" title="物理层编码违例"></a>物理层编码违例</h4><p>Physical layer coding violation （n. 违反, 冒犯, 侵害）<br>对于曼彻斯特Manchester编码，两个跳变表示一个bit，所以当出现长高电平，常低电平，就属于物理层违例了，可以作为帧的边界。</p>
<h3 id="3-1-3差错控制（ERROR-control）"><a href="#3-1-3差错控制（ERROR-control）" class="headerlink" title="3.1.3差错控制（ERROR control）"></a>3.1.3差错控制（ERROR control）</h3><p>可靠的传输：不能少，不能多，顺序不能错</p>
<h3 id="3-1-4流量控制"><a href="#3-1-4流量控制" class="headerlink" title="3.1.4流量控制"></a>3.1.4流量控制</h3><h4 id="两种流量控制"><a href="#两种流量控制" class="headerlink" title="两种流量控制"></a>两种流量控制</h4><ol>
<li>基于反馈信息的流量控制 feedback</li>
<li>基于速率的流量控制（主要是网络层，一种内嵌的机制，浅显的理解是限制速率）rate-based</li>
</ol>
<h4 id="流量控制协议"><a href="#流量控制协议" class="headerlink" title="流量控制协议"></a>流量控制协议</h4><ol>
<li>停等 Stop Aan Wait</li>
<li>滑动窗口 Sliding Window</li>
</ol>
<h2 id="3-2差错检验和纠正"><a href="#3-2差错检验和纠正" class="headerlink" title="3.2差错检验和纠正"></a>3.2差错检验和纠正</h2><ol>
<li><p>错误分类</p>
<ul>
<li>lost frames：一个数据帧完全没能传过去，常常是因为噪音或者掉队</li>
<li>damaged frames：一些bit错了</li>
</ul>
</li>
<li><p>差错检测</p>
<ol>
<li>奇偶校验码(parity):检测单比特错误</li>
<li>Cyclic Redundancy Check:CRC</li>
<li>Atuomatic Repeat reQuest:ARQ</li>
</ol>
</li>
<li><p>差错纠正</p>
<ul>
<li>前向纠错（forward error correction）FEC</li>
</ul>
</li>
</ol>
<h3 id="纠错码"><a href="#纠错码" class="headerlink" title="纠错码"></a>纠错码</h3><blockquote>
<p>补充：海明距离Hamming<br>   两个编码异或之后为1的位数<br>   检测到d个errors，需要distance为d+1的编码<br>   纠正d个errors，需要distance为2d+1的编码<br>   这里的距离指的是码表上任意两个编码之间的hamming距离，取最小。对于已知的检错方法，要确定能够检测出几个error应该考虑最坏的情况。</p>
</blockquote>
<h3 id="海明码"><a href="#海明码" class="headerlink" title="海明码"></a>海明码</h3><p>一个公式：<br>$m+r+1 \le 2^r$<br>m:数据位数<br>r：所需的校验位<br>由该式可以解出需要的最少校验位</p>
<p>海明码的构造：<br><img src="https://api2.mubu.com/v3/document_image/164890187785875d5.jpg" alt="海明码"><br><font size=1>为什么这个人字这么难看啊吐…大概是自己也知道不会再看第二遍了吧…（orz）</font></p>
<p>海明码的作用：<br>可以校验一位差错，并纠正。<br>假如第5位发生了错误，那么第1和4位的校验位会出错，计算1+4可得第5位出错，取反即可纠正。而如果是校验位发生了错误，那么只有那一个校验位错了，就可以知道是校验位出错了。（所有这些都是建立在仅仅发生一个bit的错误上的）<br><img src="https://api2.mubu.com/v3/document_image/1158e3b6-3b70-4032-ae21-3c36c36602e7-16175743.jpg" alt="示例"></p>
<p>如果发生了多位差错呢？<br>correct burst errors：<br>这里👴没懂具体咋搞的，回头机缘巧合懂了再来补文字解释（🕊🕊🕊咕咕咕）<br><img src="https://api2.mubu.com/v3/document_image/c126bef4-a95d-473b-bcbe-27208a333a10-16175743.jpg" alt="correct burst errors："></p>
<p>其他的一些纠错码：<br>卷积码（convolutional code）<br>里德所罗门码（Reed-Solomon code）<br>低密度奇偶校验码（Low-Density Parity Check codes）</p>
<h3 id="检错码"><a href="#检错码" class="headerlink" title="检错码"></a>检错码</h3><p>关于用检错码划算还是用纠错码划算的问题：<br>gzc给了一个Example<br> (<strong>single-bit error</strong>)</p>
<ul>
<li>比特错误率 BER&#x3D;10-6, 1Block&#x3D;1000bits, Data&#x3D;1M bits，也就是说传1M（$10^6$）的数据，每1000bits分一个块块er，然后一共有1000个块块er。</li>
<li>The overhead（开销）<ul>
<li>检错码Error detection + retransmission: 2001 bits （1000+1001）多的那个1是重传的时候的奇偶校验位啦（</li>
<li>纠错码Hamming code : 10,000 bits(1000块*10位校验位)</li>
</ul>
</li>
</ul>
<p>一道👴不理解的题<br>Suppose that data are transmitted in blocks of sizes 1000 bits. What is the maximum error rate under which error detection and retransmission mechanism (1 parity bit per block) is better than using Hamming code? Assume that bit errors are independent of one another and no bit error occurs during retransmission.<br><a href="https://api2.mubu.com/v3/document_image/5bbff850-5b07-4bc4-b927-def84152dbb8-16175743.jpg"></a></p>
<h4 id="奇偶校验码Parity"><a href="#奇偶校验码Parity" class="headerlink" title="奇偶校验码Parity"></a>奇偶校验码Parity</h4><p>略</p>
<h4 id="校验和Checksums"><a href="#校验和Checksums" class="headerlink" title="校验和Checksums"></a>校验和Checksums</h4><p>gzc说从网上抄了段代码给👴们👀👀</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function">Word <span class="title">Cksum</span><span class="params">(Word *Buf, Word Num_Words)</span></span></span><br><span class="line"><span class="function">	</span>&#123;</span><br><span class="line">	    Dword Sum;</span><br><span class="line">  	    <span class="keyword">for</span>  ( Sum=<span class="number">0</span>; Num_Words&gt;<span class="number">0</span>;  Num_Words--)</span><br><span class="line">	         Sum+=*Buf++;</span><br><span class="line">	    Sum = ( Sum &gt;&gt; <span class="number">16</span> ) + ( Sum &amp; <span class="number">0xffff</span> ); </span><br><span class="line">	    Sum += Sum &gt;&gt; <span class="number">16</span>;</span><br><span class="line">	    <span class="keyword">return</span> ~Sum;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h4 id="CRC循环冗余校验"><a href="#CRC循环冗余校验" class="headerlink" title="CRC循环冗余校验"></a><mark>CRC循环冗余校验</mark></h4><p><font size=1>这玩意儿是个重点</font><br>名字：Ploynomial code多项式编码，也就是CRC<br>计算CRC：<br>Frame:要传输的数据帧<br>Generator:生成多项式，可以和二进制串一一对应，（一般第一位是1）如$x^4+x+1$对应串10011，<strong>最高幂次r&#x3D;4，对应r+1&#x3D;5位二进制串</strong>，从低位开始写不容易出错。<br>在计算过程中的法则是模2加法，也就是异或运算，在该运算中，加减等价。<br>计算过程：</p>
<ol>
<li>把Frame左移r位，也就是$\times2^r$</li>
<li>用（1）得到是数模二除Generator（注意这个过程所有的加和减也都是异或运算）</li>
<li>除到（1）得到的数的最后一位得到余数，用（1）中数-余数，但是这里也是模二减，相当于异或“+”，且不产生进位er。</li>
<li>如果最终得到的余数不是刚好r位:就直接当数加上去的，详见例2.</li>
<li>然后算完之后就看gcz说的power，👴就发现，加上余数之后恰好整除Generator</li>
</ol>
<p>一个例子1：<br><img src="https://api2.mubu.com/v3/document_image/66a3abff-51ac-47b2-bdf7-145961822f15-16175743.jpg" alt="例子"><br>例子2：<br><img src="https://api2.mubu.com/v3/document_image/08fdf2e9-eb53-46b8-8baf-2fd57268ceb0-16175743.jpg" alt="例子2"></p>
<p>the power of CRC</p>
<ul>
<li>若不出现差错：收到T(X)</li>
<li>若出现了一些差错：收到E(X)，由于模二加法，0-&gt;1和1-&gt;0都可以用“+”表示</li>
<li>计算[T(X)+E(X)]&#x2F;G(X) &#x3D; E(X)&#x2F;G(X)，所以在E(X)&#x2F;G(X)&#x3D;&#x3D;0的时候，差错不能被检查出来</li>
<li>由此推论：<ol>
<li>添加了r bit的冗余信息的码，一定能检测出$\le r$bit的差错，因为rbit冗余信息意味着最高幂次为r，也就是说G(X)有r+1位。</li>
<li>若让（x+1）是G(X)的一个因子（factor），则所有的奇数位都可以检测出来，<font size=1>这玩意儿可以证，但根据速通理论的高质高效原则，👴忍住了，没去看怎么证。</font></li>
<li>若触发差错的bits长度为（r+1），则检测不出来的概率为$\cfrac{1}{2^{r-1}}$，因为出错长度为r+1个bit,则第一个和最后一个一定是错了也就是E(X)的第一位和最后一位都是1，而剩下的中间r-1位不知道是0（没错）还是1（错了）。</li>
<li>而若触发差错的bits长度更长的时候，触发差错的可能就是$\cfrac{1}{2^r}$</li>
</ol>
</li>
</ul>
<p>生成多项式：</p>
<blockquote>
<ul>
<li>CRC-16<br>$x^{16}+x^{15}+x^2+1$</li>
<li>CRC-CCITT  (HDLC)<br>$x^{16}+x^{12}+x^5+1$</li>
<li>CRC-32 (IEEE802)<br>$x^{32}+x^{26}+x^{23}+x^{22}+x^{16}+x^{12}+x^{11}+x^{10}+x^{8}+x^{7}+x^{5}+x^{4}+x^{2}+x^{1}+1$</li>
</ul>
</blockquote>
<h2 id="3-3基本-elementary-数据链路层协议"><a href="#3-3基本-elementary-数据链路层协议" class="headerlink" title="3.3基本(elementary)数据链路层协议"></a>3.3基本(elementary)数据链路层协议</h2><p>几种单工协议：<br>An Unrestricted Simplex Protocol <strong>乌托邦</strong>，Unrestricted没有限制的<br>A Simplex Stop-and-Wait Protocol <strong>停等协议</strong><br>A Simplex Protocol for a Noisy Channel <strong>噪音</strong></p>
<h3 id="Protocol-1-乌托邦Utopia"><a href="#Protocol-1-乌托邦Utopia" class="headerlink" title="Protocol 1: 乌托邦Utopia"></a>Protocol 1: 乌托邦Utopia</h3><p>无差错的channel，完美的接收者，源源不断的发送<br><img src="https://api2.mubu.com/v3/document_image/f2466881-7f1b-498d-b4d2-da1a258399da-16175743.jpg" alt="utopia"></p>
<h3 id="Protocol-2-停等协议"><a href="#Protocol-2-停等协议" class="headerlink" title="Protocol 2:停等协议"></a>Protocol 2:停等协议</h3><p><strong>Stop-and-Wait Protocol for a Error-free Channel</strong><br>考虑flow control，仍然是完美的信道<br><img src="https://api2.mubu.com/v3/document_image/631de808-d162-41ae-a8d0-d198cddf5c7a-16175743.jpg" alt="flow control"><br>↑对于短距离的通信完全是没有问题的，效率很高，远距离就不行了</p>
<h3 id="Protocol-3-有噪音的"><a href="#Protocol-3-有噪音的" class="headerlink" title="Protocol 3:有噪音的"></a>Protocol 3:有噪音的</h3><p><strong>A Simplex Protocol for a Noisy Channel</strong><br><img src="https://api2.mubu.com/v3/document_image/b7928813-66a6-4f48-8c86-023db3689df9-16175743.jpg" alt="Noisy"><br>ACK:<strong>ack</strong>nowledgement character命令正确应答<br>NAK：<strong>n</strong>agative a<strong>ck</strong>nowladge否定应答<br>前3种情况都没有问题，但是第4种，ACK丢了，就可能导致重复发送，这就引入了序列号的使用。<br>此外，一个晚到的ACK也可能导致发送重复的数据</p>
<h4 id="Sequence-Number"><a href="#Sequence-Number" class="headerlink" title="Sequence Number"></a>Sequence Number</h4><p>对于数据链路层的<strong>停等协议，一个bit（0&#x2F;1）就足够了</strong>，可以做到判断是新的还是旧的帧<br>对于传输层，1bit就不够了，需要较大的编号空间使得在编号回卷时，保证同编号的旧帧不可能被缓冲在网络中，如：TFTP<br>protocol3：</p>
<ul>
<li>sender 伪代码<br>课本上的代码见<a href="https://api2.mubu.com/v3/document_image/bb4f22d1-ddb4-42de-b363-789775f057f3-16175743.jpg">这里</a></li>
</ul>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line">从网络层获取一个分组放入buffer</span><br><span class="line">发送buffer中的数据，新启动定时器</span><br><span class="line">label1:</span><br><span class="line"><span class="built_in">wait_for_event</span>()</span><br><span class="line"><span class="keyword">switch</span> (event) &#123;</span><br><span class="line"><span class="keyword">case</span> 收到了坏帧(校验和错):</span><br><span class="line">     重发缓冲在buffer里的数据，重新启动定时器</span><br><span class="line">     <span class="comment">//这里的&quot;重新&quot;和&quot;新&quot;都是指从头开始启动计时器</span></span><br><span class="line"><span class="keyword">case</span> 定时器超时：</span><br><span class="line">     重发缓冲在buffer里的数据，新启动定时器</span><br><span class="line"><span class="keyword">case</span> 收到校验和正确的帧：</span><br><span class="line">     <span class="keyword">if</span>（ack序号正确） &#123;</span><br><span class="line">        关闭旧定时器</span><br><span class="line">        从网络层获取下一个分组放入buffer</span><br><span class="line">        发送buffer中的数据，新启动定时器</span><br><span class="line">     &#125; <span class="keyword">else</span> </span><br><span class="line">         重发缓冲在buffer里的数据，重新启动定时器</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">goto</span> label1</span><br></pre></td></tr></table></figure>

<p>简化版：</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line">从网络层获取一个分组放入<span class="function">buffer</span></span><br><span class="line"><span class="function"><span class="title">while</span><span class="params">(<span class="literal">true</span>)</span> </span>&#123;</span><br><span class="line">   发送buffer中的数据，启动定时器</span><br><span class="line">   <span class="built_in">wait_for_event</span>()</span><br><span class="line">   <span class="keyword">if</span> (收到校验和正确的帧) &#123;</span><br><span class="line">      <span class="keyword">if</span>（ack序号正确） &#123;</span><br><span class="line">         关闭旧定时器</span><br><span class="line">         从网络层获取下一个分组放入buffer</span><br><span class="line">         &#125; </span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>receiver伪代码<br>课本上的代码见<a href="https://api2.mubu.com/v3/document_image/fa67061a-f013-4c8f-9c3f-9fea1dff167d-16175743.jpg">这里</a></li>
</ul>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line">frame_expected=<span class="number">0</span></span><br><span class="line"><span class="keyword">while</span>(<span class="literal">true</span>) &#123;</span><br><span class="line">   <span class="built_in">wait_for_event</span>()</span><br><span class="line">   <span class="keyword">switch</span>(event) &#123;</span><br><span class="line">   <span class="keyword">case</span> 坏帧：</span><br><span class="line">      do_nothing</span><br><span class="line">   <span class="keyword">case</span> 收到校验和正确的数据帧:</span><br><span class="line">      <span class="keyword">if</span>（序号==frame_expected） &#123;</span><br><span class="line">         向网络层上交分组</span><br><span class="line">         回ACK（序号为frame_expected)</span><br><span class="line">         <span class="built_in">inc</span>(frame_expected)</span><br><span class="line">      &#125;  <span class="keyword">else</span> &#123;</span><br><span class="line">         回ACK（序号为frame_expected<span class="number">-1</span>)</span><br><span class="line">      &#125;</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="计时器Timer"><a href="#计时器Timer" class="headerlink" title="计时器Timer"></a>计时器Timer</h4><p>gzc说计时器的间隔是个比较精细的活儿，短了可能收不到，然后每个帧都得发俩遍，间隔长了效率低。实际上设计的比较保守（因为错误实在比较少），但是自己做的实验里面就整个比较合适的值就完了（500ms差不多就完了，这世间卫星都跑到了）。<br><font size=1>👴居然听懂了</font></p>
]]></content>
      <categories>
        <category>笔记</category>
      </categories>
      <tags>
        <tag>course</tag>
        <tag>计网</tag>
      </tags>
  </entry>
  <entry>
    <title>凌晨2点，👴未眠</title>
    <url>/2022/04/08/%E5%87%8C%E6%99%A82%E7%82%B9%EF%BC%8C%E7%88%B7%E6%9C%AA%E7%9C%A0/</url>
    <content><![CDATA[<p>先说说没睡的原因。<br>👴从下午开始睡大觉，十点多睡醒了，以至于到现在还是睡不着。另外的一个现在仍旧非常精神的原因是睡醒之后胃不舒服不想喝纯白开，随便搞了点咖啡让自己好受点。<br>睡醒之后看了会儿美人。<br>跟<a href="https://mushroom323.github.io/">🍄神</a>讨论了点儿计网，由于躺着脑子根本不动所以爬起来了。<br>之后听了听歌，发现<a href="https://www.axsl.site/">老板</a>亦未寝。</p>
<p>老板给👴发了关于“大和抚子”的废话。<br>👴发表了非常<del>喜爱</del>欣赏明艳大气美女子的言论。</p>
<p>👴开始看闲书（某z姓大佬推荐的好书）。</p>
<blockquote>
<p>👴：<br><img src="https://s3.bmp.ovh/imgs/2022/04/08/e949dd6f6bd556cd.png" alt="闲书"><br>老板：你可以把自己🧠，拿出来。</p>
</blockquote>
<p>👴们讨论了大脑的跳跃性思维导致我们无法控制自己的大脑去做什么这件事。<br>接着就讨论起到底有没有“真正喜欢的事情”这个话题。（相关性并不强的俩话题，或许佐证了大脑自己愿意想什么是不怎么受👴们控制的）<br>👴本来以为自己没有什么喜欢做的事情。<br>然后发现满足“因为喜欢所以可以一直做下去不产生任何反感兴趣和不耐烦的事情”条件的<br>👴还是有的<br>至少在看美人这件事上👴完全满足这个条件（</p>
<center>
    <img style="border-radius: 0.3125em;
    box-shadow: 0 2px 4px 0 rgba(34,36,38,.12),0 2px 10px 0 rgba(34,36,38,.08);" 
    src="https://s3.bmp.ovh/imgs/2022/04/08/887278b873c108fc.png">
    <br>
    <div style="color:orange; border-bottom: 1px solid #d9d9d9;
    display: inline-block;
    color: #999;
    padding: 2px;">美人论</div>
</center>

<p>最后来点闲书的摘抄</p>
<ul>
<li>记得过去老师讲解《论语》中曾子说的“吾日三省吾身”，有两种解释，第<br>一种是我每一天都自我反省三（多）次；第二种是我每一天都以下列三件事来自我反省；管他每天到底是“反省三次”，还是“列出三件事来反省”，都并不重要。</li>
</ul>
<p><strong>重要的是，他每天都在“反省”</strong>。<br>作为一个真正意义上的人，好像没有什么比这个更重要了。</p>
<ul>
<li>长期来看，我们都是要死的。————约翰·梅纳德·凯恩斯</li>
<li>即使是在极端恶劣的环境里，人们也会拥有一种最后的自由，那就是选择自己的态度的自由。————维克托·弗兰克</li>
<li>最常见的误解就是，当我们觉得自己痛苦时，总是不自觉的把自己想象成全世界最痛苦的人。这是非常自然的，因为我们自己的痛苦我们亲身感受，而别人的痛苦我们又很难真正做到感同身受。</li>
<li>所以说，怀旧是一种错觉。甚至它更可能只不过是幻觉。有人用过这么一个比喻：如果说记忆本身是葡萄，那么回忆的过程就是发酵。</li>
<li>因为人生苦短，如果成功太慢那么幸福必然减半。</li>
</ul>
]]></content>
      <categories>
        <category>随笔</category>
      </categories>
      <tags>
        <tag>少年听雨</tag>
      </tags>
  </entry>
  <entry>
    <title>计网笔记-数据链路层1</title>
    <url>/2022/04/06/%E8%AE%A1%E7%BD%91%E7%AC%94%E8%AE%B0_%E6%95%B0%E6%8D%AE%E9%93%BE%E8%B7%AF%E5%B1%822/</url>
    <content><![CDATA[<h2 id="3-4滑动窗口协议"><a href="#3-4滑动窗口协议" class="headerlink" title="3.4滑动窗口协议"></a>3.4滑动窗口协议</h2><p>英文是：<br><strong>Sliding Window</strong></p>
<h3 id="捎带应答Piggy-backing"><a href="#捎带应答Piggy-backing" class="headerlink" title="捎带应答Piggy backing"></a>捎带应答Piggy backing</h3><p><font size=1>查了一下piggy的意思是贪心的，🐷🐷风评被害</font><br>就是说俩边不停的来回发，（全双工），就可以把ACK信息放在sck field里面，跟着另一方的回复发回去。</p>
<h3 id="发送-x2F-接收窗口Sending-window-amp-Receiving-window"><a href="#发送-x2F-接收窗口Sending-window-amp-Receiving-window" class="headerlink" title="发送&#x2F;接收窗口Sending window &amp; Receiving window"></a>发送&#x2F;接收窗口Sending window &amp; Receiving window</h3><p>发送窗口维护一组序号，一个时间对应一组可以发送的序号<br>接收窗口同理，维护的是一组可以接受的信号。接收窗口大于1的时候，落在接收窗口的帧不能马上接受，需要把没按顺序到达的帧先存起来。</p>
<p>几种协议：（由简到繁，由最简单的调整参数就可以依次实现）</p>
<ul>
<li>A <strong>One-Bit</strong> Sliding Window Protocol 实际上就是停等协议</li>
<li>A Protocol Using <strong>Go Back N</strong>  GBN协议</li>
<li>A Protocol Using <strong>Selective Repeat</strong> SR协议</li>
</ul>
<h3 id="单bit的滑动窗口协议"><a href="#单bit的滑动窗口协议" class="headerlink" title="单bit的滑动窗口协议"></a>单bit的滑动窗口协议</h3><p><strong>Protocol 4</strong><br>发送窗口&#x3D;&#x3D;接收窗口<br><img src="https://api2.mubu.com/v3/document_image/88477f43-1e79-488e-8992-db2a956bad4a-16175743.jpg" alt="单bit"><br>A sliding window of size 1, with a 3-bit sequence number.<br>窗口关闭的意思是没有帧在发送<br>(a) 初始状态<br>(b) 第一个帧发送完成<br>(c) 第一个帧已经被接收<br>(d) 第一个ACK被接收</p>
<p>课本上的代码在<a href="https://api2.mubu.com/v3/document_image/9d4c339e-0bfa-4e7d-9f5e-d9b655f187a5-16175743.jpg">这里1</a>以及<a href="https://api2.mubu.com/v3/document_image/b9392d86-a6db-4331-968c-4a485dca220f-16175743.jpg">这里2</a><br><font size=1>gzc说实际工程里的发送方的序号是期望收到的序号，但是课本上不是，whatever，👴不懂</font></p>
<ul>
<li>关于line utilization（线路利用）<br>👴自己的理解大概就是<font color=blue><br>$\frac{发送端在发送消息的时间}{消息到达并收到ACK的时间}$</font><br>其中<br><font size=2 color=blue>消息到达并收到ACK的时间&#x3D;发送消息的时间+传播(propagation)延迟$\times2$</font></li>
<li>单bit滑动窗口协议的问题就在于<u>线路利用率太低了</u></li>
</ul>
<h3 id="Go-Back-N-协议"><a href="#Go-Back-N-协议" class="headerlink" title="Go Back N 协议"></a>Go Back N 协议</h3><p><strong>Protocol 5</strong><br><img src="https://api2.mubu.com/v3/document_image/70054526-d907-4673-b4b6-1088c625507a-16175743.jpg"></p>
<h3 id="SR协议Selective-Repeat-x2F-Reject"><a href="#SR协议Selective-Repeat-x2F-Reject" class="headerlink" title="SR协议Selective Repeat&#x2F;Reject"></a>SR协议Selective Repeat&#x2F;Reject</h3><p><strong>Protocol 6</strong></p>
<h4 id="关于滑动窗口的数量"><a href="#关于滑动窗口的数量" class="headerlink" title="关于滑动窗口的数量"></a>关于滑动窗口的数量</h4><p>Ws：sender window<br>Wr: reciver window<br>他们的数量关系满足以下式子：</p>
<blockquote>
<p>Ws+Wr &lt;&#x3D;2n<br> Ws&gt;&#x3D;Wr<br>可以推出：<br> Ws,Wr&lt;&#x3D; 2n -1</p>
</blockquote>
<p>课本上的代码在<a href="https://api2.mubu.com/v3/document_image/596a271d-196c-44b1-acbc-ca15be42618d-16175743.jpg">这里1</a>,<a href="https://api2.mubu.com/v3/document_image/89628c93-471f-411e-923b-7df2be7b36bc-16175743.jpg">这里2</a>,<a href="https://api2.mubu.com/v3/document_image/7a115cd0-ad06-4e6b-8d04-d797d631eeee-16175743.jpg">这里3</a>以及<a href="https://api2.mubu.com/v3/document_image/d601ad65-c489-47e6-8273-f64e9c9ba542-16175743.jpg">这里4</a></p>
<h4 id="关于line-utilization（gzc的official理解）"><a href="#关于line-utilization（gzc的official理解）" class="headerlink" title="关于line utilization（gzc的official理解）"></a>关于line utilization（gzc的official理解）</h4><p>当sender只有一个窗口时，也就是单bit的滑动窗口时，示意图如下。（分为a，b两种情况，从上往下为时间推进方向）<br><img src="https://api2.mubu.com/v3/document_image/6679fb30-043e-4701-8fef-a1b044dfd208-16175743.jpg" alt="official理解"></p>
<p>$\alpha&#x3D;\cfrac{t_p}{t_f}$ ，  $t_p$即propagation time，传输时延，$t_f$是发送时延。<br>这里的$\alpha$其实就是sender和reciver之间可以放得下几个Frame。</p>
<p>当sender有W个窗口的时候就是这么个状态<br><img src="https://api2.mubu.com/v3/document_image/9b174992-5855-4a4e-b9e7-57f4c0ea5def-16175743.jpg" alt="W个窗口"><br>常见介质中的信号传播速度<br><img src="https://api2.mubu.com/v3/document_image/750a9a07-002d-4976-aa20-024e882846e0-16175743.jpg"></p>
<blockquote>
<p>throughput:吞吐量&#x3D;利用率*带宽</p>
</blockquote>
<h2 id="3-5数据链路层协议实例"><a href="#3-5数据链路层协议实例" class="headerlink" title="3.5数据链路层协议实例"></a>3.5数据链路层协议实例</h2>]]></content>
      <categories>
        <category>笔记</category>
      </categories>
      <tags>
        <tag>course</tag>
        <tag>计网</tag>
      </tags>
  </entry>
</search>
